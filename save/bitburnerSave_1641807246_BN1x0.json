{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":423,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.2300243521985117,\"hacking_speed_mult\":1.2075192241897803,\"hacking_money_mult\":1.1156683466653166,\"hacking_grow_mult\":1.1156683466653166,\"hacking_exp\":5766931.138537844,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.4214161414006004,\"strength_mult\":1.1156683466653166,\"defense_mult\":1.1156683466653166,\"dexterity_mult\":1.546316328478129,\"agility_mult\":1.1714517639985824,\"charisma_mult\":1.3388020159983798,\"hacking_exp_mult\":1.2885969403984407,\"strength_exp_mult\":1.2272351813318483,\"defense_exp_mult\":1.2272351813318483,\"dexterity_exp_mult\":1.2272351813318483,\"agility_exp_mult\":1.2272351813318483,\"charisma_exp_mult\":1.2272351813318483,\"company_rep_mult\":1.1156683466653166,\"faction_rep_mult\":1.1156683466653166,\"money\":1395200348.8707042,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":37990.79999999839,\"ram\":64,\"totalMoneyGenerated\":887286341.1695007,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":37990.79999999839,\"ram\":64,\"totalMoneyGenerated\":887101004.1284271,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":37990.79999999839,\"ram\":64,\"totalMoneyGenerated\":886952165.0533314,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":37990.79999999839,\"ram\":64,\"totalMoneyGenerated\":886803688.4586072,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":37990.79999999839,\"ram\":64,\"totalMoneyGenerated\":886544490.4654621,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":37480.799999996554,\"ram\":64,\"totalMoneyGenerated\":886085881.961466,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":36490.59999999305,\"ram\":64,\"totalMoneyGenerated\":885465639.7080473,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":36310.399999992456,\"ram\":64,\"totalMoneyGenerated\":885255450.7666744,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":36310.399999992456,\"ram\":64,\"totalMoneyGenerated\":885107985.5392739,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":36310.399999992456,\"ram\":64,\"totalMoneyGenerated\":884923654.0050231,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":36310.399999992456,\"ram\":64,\"totalMoneyGenerated\":884702456.1639224,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":36159.999999991924,\"ram\":64,\"totalMoneyGenerated\":882927737.8047458,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":36159.999999991924,\"ram\":64,\"totalMoneyGenerated\":882639377.7375444,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":35979.79999999127,\"ram\":64,\"totalMoneyGenerated\":882139693.8262054,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":35919.79999999105,\"ram\":64,\"totalMoneyGenerated\":879869964.905135,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":35709.799999990355,\"ram\":64,\"totalMoneyGenerated\":875702359.9874979,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":33791.19999998554,\"ram\":64,\"totalMoneyGenerated\":842316471.3480664,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":32980.39999999855,\"ram\":64,\"totalMoneyGenerated\":829466835.0272647,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":29738.40000000263,\"ram\":64,\"totalMoneyGenerated\":758941815.6062806,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":27658.00000000265,\"ram\":64,\"totalMoneyGenerated\":713716954.0854087,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":26637.600000002683,\"ram\":64,\"totalMoneyGenerated\":687420954.7357343,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":26138.00000000273,\"ram\":64,\"totalMoneyGenerated\":674528069.9043009,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":22653.40000000305,\"ram\":64,\"totalMoneyGenerated\":584603036.9106408,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":954.4000000000698,\"ram\":64,\"totalMoneyGenerated\":24629642.280071534,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":25806.41479470852,\"onlineTimeSeconds\":954.4000000000698,\"ram\":64,\"totalMoneyGenerated\":24629642.280071534,\"name\":\"hacknet-node-24\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Sector-12\",\"CyberSec\",\"NiteSec\",\"The Black Hand\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":11,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.1156683466653166,\"crime_success_mult\":1.1156683466653166,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":7,\"workExpMult\":4,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":100,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.1156683466653166,\"hacknet_node_money_mult\":2.8138201641974288,\"hacknet_node_purchase_cost_mult\":0.6849337645079179,\"hacknet_node_ram_cost_mult\":0.8953382542587163,\"hacknet_node_core_cost_mult\":0.8953382542587163,\"hacknet_node_level_cost_mult\":0.7610375161199088,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1641807246092,\"totalPlaytime\":395758000,\"playtimeSinceLastAug\":38090600,\"playtimeSinceLastBitnode\":395758000,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":225000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":86521814195.15382,\"hacknet\":19289761313.89554,\"hacknet_expenses\":-12902332179.430511,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":1394200348.8707042,\"work\":0,\"servers\":-91425742980.70663,\"other\":-314300000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-4750080,\"codingcontract\":8775000000,\"corporation\":0,\"crime\":2561418.18204565,\"gang\":0,\"hacking\":110136629376.20195,\"hacknet\":54150116714.7814,\"hacknet_expenses\":-53315137358.903984,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":3583225499.5048823,\"work\":6331200.000004217,\"servers\":-96186667257.01898,\"other\":-941999999.5552875,\"augmentations\":-19038858511.585842}},\"scriptProdSinceLastAug\":47563918359,\"exploits\":[],\"achievements\":[{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641728119529},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641728119546},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641728119548},{\"ID\":\"NS2\",\"unlockedOn\":1641728119550},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1641728119552},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641728119555},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641728119557},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641728119560},{\"ID\":\"FROZE\",\"unlockedOn\":1641733999465},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641734059464},{\"ID\":\"TOR\",\"unlockedOn\":1641734059466},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1641742351732},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641748263270},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641748263280},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641748323279},{\"ID\":\"NITESEC\",\"unlockedOn\":1641748923287},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641749463285},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641749583283},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1641780007459}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"86.1.0.7\",\"isConnectedTo\":true,\"maxRam\":4096,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"relaySMTP.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"FTPCrack.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"ramUsed\":3895.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"attk.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2984597.166225647,\"offlineMoneyMade\":0,\"offlineRunningTime\":19453.376999999997,\"onlineExpGained\":2578050.0859558904,\"onlineMoneyMade\":47563918359,\"onlineRunningTime\":17664.610000011646,\"pid\":1,\"ramUsage\":17.5,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///b1e24d07-616c-41e4-8096-3977eeaa26ad\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///b0eeeafd-f075-4c6d-aa68-28793b9f00b2\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///b1e24d07-616c-41e4-8096-3977eeaa26ad\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///b0eeeafd-f075-4c6d-aa68-28793b9f00b2\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///377e8590-1a39-43c4-b8d4-41020c72ec6c\"},{\"filename\":\"/lib/server.js\",\"url\":\"blob:file:///63585cc6-140c-4860-91a0-37c7557a3b38\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///377e8590-1a39-43c4-b8d4-41020c72ec6c\"},{\"filename\":\"attk.js\",\"url\":\"blob:file:///83bb458e-a0ec-4d6a-91a5-b8e297548a6d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.088,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":205.80999999999685,\"pid\":2,\"ramUsage\":24.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///4025d151-bcf4-4519-878a-a4d0a6cc3be1\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///8eae08d5-7d5a-412c-9395-dd47cb6998c4\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///4025d151-bcf4-4519-878a-a4d0a6cc3be1\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///8eae08d5-7d5a-412c-9395-dd47cb6998c4\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///4025d151-bcf4-4519-878a-a4d0a6cc3be1\"},{\"filename\":\"/lib/server.js\",\"url\":\"blob:file:///48ff239f-b1c0-476f-99ff-b7e723bb2e75\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///4025d151-bcf4-4519-878a-a4d0a6cc3be1\"},{\"filename\":\"grow.js\",\"url\":\"blob:file:///08aff47a-0f2c-4d6a-a582-7336a7b28d1c\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",2202,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":29,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2202,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\n\\n/**\\n * Attack configuration object that is shared\\n * with the distributed nodes and defines the\\n * specific actions to take.\\n */\\nlet config = {};\\n\\n/**\\n * The master script manages the main services\\n * and prepares worker nodes.\\n *\\n * It can use a lot of RAM, as it does the main\\n * data processing and orchestrates the entire\\n * network of workers.\\n *\\n * This script is only used on the \\\"home\\\" server!\\n *\\n * Installation:\\n * -------------\\n *\\n * > alias master=\\\"run master.js\\\"\\n *\\n * Usage:\\n * ------\\n *\\n * > master --help\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tns.tprint(\\\"\\\");\\n\\tns.tprint(\\\"---------- START ----------\\\");\\n\\n\\tif (!ns.args.length) {\\n\\t\\tshowHelp(ns);\\n\\t\\tendScript(ns);\\n\\t}\\n\\n\\tconst args = ns.flags([\\n\\t\\t[\\\"help\\\", false],\\n\\t\\t[\\\"start\\\", false],\\n\\t\\t[\\\"stop\\\", false],\\n\\t\\t[\\\"info\\\", false],\\n\\t\\t[\\\"target\\\", \\\"\\\"],\\n\\t\\t[\\\"hack-algo\\\", \\\"\\\"],\\n\\t\\t[\\\"bound-sec\\\", \\\"\\\"],\\n\\t\\t[\\\"bound-money\\\", \\\"\\\"],\\n\\t\\t[\\\"lock-budget\\\", \\\"\\\"],\\n\\t\\t[\\\"lock-money\\\", \\\"\\\"],\\n\\t\\t[\\\"lock-ram\\\", \\\"\\\"],\\n\\t]);\\n\\n\\tif (args.help) {\\n\\t\\tshowHelp(ns);\\n\\t\\tendScript(ns);\\n\\t}\\n\\n\\tconfig = Common.getConfig(ns);\\n\\n\\t// Process commands.\\n\\n\\tif (args.start) {\\n\\t\\tconfig.started = true;\\n\\t}\\n\\n\\tif (args.stop) {\\n\\t\\tconfig.started = false;\\n\\t}\\n\\n\\tif (\\\"\\\" !== args.target) {\\n\\t\\tif (ns.serverExists(args.target)) {\\n\\t\\t\\tCommon.say(ns, `Change target server to ${args.target}`);\\n\\t\\t\\tconfig.target = args.target;\\n\\t\\t\\tconfig.autoTarget = false;\\n\\t\\t} else if (\\\"auto\\\" === args.target) {\\n\\t\\t\\tCommon.say(ns, \\\"Auto pick target server\\\");\\n\\t\\t\\tconfig.target = \\\"\\\";\\n\\t\\t\\tconfig.autoTarget = true;\\n\\t\\t}\\n\\t}\\n\\n\\tif (\\\"\\\" !== args[\\\"hack-algo\\\"]) {\\n\\t\\tif (\\\"hwgw\\\" === args[\\\"hack-algo\\\"]) {\\n\\t\\t\\tconfig.hackAlgo = \\\"hwgw\\\";\\n\\t\\t} else if (\\\"default\\\" === args[\\\"hack-algo\\\"]) {\\n\\t\\t\\tconfig.hackAlgo = \\\"default\\\";\\n\\t\\t}\\n\\t\\tCommon.say(ns, `Change hacking algorithm to ${config.hackAlgo}`);\\n\\t}\\n\\n\\tif (\\\"\\\" !== args[\\\"bound-sec\\\"]) {\\n\\t\\tconfig.boundSec = parseFloat(args[\\\"bound-sec\\\"]) || 0;\\n\\t\\tconfig.boundSec = Math.max(config.boundSec, 0.5);\\n\\t\\tconfig.boundSec = Math.min(config.boundSec, 99);\\n\\t\\tCommon.say(ns, `New security boundary: ${config.boundSec.toFixed(2)}`);\\n\\t}\\n\\n\\tif (\\\"\\\" !== args[\\\"bound-money\\\"]) {\\n\\t\\tconfig.boundMoney = parseFloat(args[\\\"bound-money\\\"]) || 0;\\n\\t\\tconfig.boundMoney = Math.max(config.boundMoney, 0);\\n\\t\\tconfig.boundMoney = Math.min(config.boundMoney, 1);\\n\\t\\tCommon.say(ns, `New money boundary: ${config.boundMoney.toFixed(2)}`);\\n\\t}\\n\\n\\tif (\\\"\\\" !== args[\\\"lock-money\\\"]) {\\n\\t\\targs[\\\"lock-budget\\\"] = args[\\\"lock-money\\\"];\\n\\t}\\n\\tif (\\\"\\\" !== args[\\\"lock-budget\\\"]) {\\n\\t\\tlet value = args[\\\"lock-budget\\\"]\\n\\t\\t\\t.replaceAll(\\\".\\\", \\\"\\\")\\n\\t\\t\\t.replaceAll(\\\"b\\\", \\\"000000\\\")\\n\\t\\t\\t.replaceAll(\\\"m\\\", \\\"000\\\")\\n\\t\\t\\t.replaceAll(\\\"k\\\", \\\"\\\");\\n\\n\\t\\tconfig.lockedBudget = Math.max(0, parseInt(value) || 0);\\n\\t\\tCommon.say(\\n\\t\\t\\tns,\\n\\t\\t\\t`Lock budget from grow.js: ${config.lockedBudget.toLocaleString()}`\\n\\t\\t);\\n\\t}\\n\\n\\tif (\\\"\\\" !== args[\\\"lock-ram\\\"]) {\\n\\t\\tconfig.lockedRam = Math.max(0, parseInt(args[\\\"lock-ram\\\"]) || 0);\\n\\t\\tCommon.say(\\n\\t\\t\\tns,\\n\\t\\t\\t`Reserved RAM on home computer: ${config.lockedRam.toLocaleString()} GB`\\n\\t\\t);\\n\\t}\\n\\n\\t// Store config/server list in files.\\n\\tawait Common.setConfig(ns, config);\\n\\n\\t// Refresh player and server stats; start services on all servers.\\n\\tawait Server.initialize(ns);\\n\\tPlayer.get(ns);\\n\\n\\tif (args.info) {\\n\\t\\tconst info = [];\\n\\n\\t\\tinfo.push(\\\"\\\");\\n\\t\\tinfo.push(\\\"Config:\\\");\\n\\t\\tinfo.push(JSON.stringify(config, null, 4));\\n\\t\\tinfo.push(\\\"\\\");\\n\\n\\t\\tif (config.target) {\\n\\t\\t\\tconst server = Server.get(config.target);\\n\\t\\t\\t\\n\\t\\t\\tinfo.push(\\\"Current attack target:\\\");\\n\\t\\t\\tinfo.push(\\\"\\\");\\n\\n\\t\\t\\tinfo.push(server.analyze(ns).replaceAll(\\\"%\\\", \\\"%%\\\"));\\n\\t\\t\\tinfo.push(\\\"\\\");\\n\\t\\t}\\n\\n\\t\\tinfo.push(\\\"\\\");\\n\\t\\tns.tprintf(info.join(\\\"\\\\n\\\"));\\n\\n\\t\\tawait ns.sleep(250);\\n\\t\\tns.tail(\\\"attk.js\\\", \\\"home\\\");\\n\\n\\t\\tawait ns.sleep(250);\\n\\t\\tns.tail(\\\"grow.js\\\", \\\"home\\\");\\n\\t}\\n\\n\\tendScript(ns);\\n}\\n\\n/**\\n * Display usage instructions.\\n */\\nfunction showHelp(ns) {\\n\\tconst help = [\\n\\t\\t\\\"Usage:\\\",\\n\\t\\t\\\"  master [--command [value]] [--command2 [value2]] ...\\\",\\n\\t\\t\\\"\\\",\\n\\t\\t\\\"Examples:\\\",\\n\\t\\t\\\"  master --target n00dles\\\",\\n\\t\\t\\\"  master --stop\\\",\\n\\t\\t\\\"  master --target n00dles --start\\\",\\n\\t\\t\\\"\\\",\\n\\t\\t\\\"Commands:\\\",\\n\\t\\t\\\"  --start      Start all stopped services.\\\",\\n\\t\\t\\\"  --stop       Stop all running services.\\\",\\n\\t\\t\\\"  --info       Outputs the current attack config.\\\",\\n\\t\\t\\\"\\\",\\n\\t\\t\\\"  --hack-algo <name>  Enable a different hacking algorithm\\\",\\n\\t\\t\\\"               default ... Default algorithm\\\",\\n\\t\\t\\\"               hwgw ... Hack-Weaken-Grow-Weaken batches\\\",\\n\\t\\t\\\"  --target <server>  Tell all worker nodes to target a specific\\\",\\n\\t\\t\\\"               server.\\\",\\n\\t\\t'               Set the server to \\\"auto\\\" to let the script pick.',\\n\\t\\t\\\"               the most profitable target.\\\",\\n\\t\\t\\\"  --bound-sec <num>  Define the security level boundary.\\\",\\n\\t\\t\\\"               Default: 4\\\",\\n\\t\\t\\\"  --bound-money <num>  Define the money boundary.\\\",\\n\\t\\t\\\"               Default: 0.6\\\",\\n\\t\\t\\\"\\\",\\n\\t\\t\\\"  --lock-money <val>  Defines the locked budget that should\\\",\\n\\t\\t\\\"               not be invested into automatic server growth.\\\",\\n\\t\\t\\\"               Set to 0 to automatically invest all your money.\\\",\\n\\t\\t\\\"               Sample values: 20k, 250m, 1050b\\\",\\n\\t\\t\\\"  --lock-ram <val>  Defines, how much RAM is reserved on the home\\\",\\n\\t\\t\\\"               computer. RAM that is not reserved is used by\\\",\\n\\t\\t\\\"               attk.js to attack a target server.\\\",\\n\\t];\\n\\n\\tns.tprintf(\\\"\\\\n%s\\\\n\\\", help.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Exits the script execution\\n */\\nfunction endScript(ns) {\\n\\tns.tprint(\\\"---------- EXIT ----------\\\\n\\\\n\\\");\\n\\tns.exit();\\n}\",\"filename\":\"master.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5be6e2ba-fabc-4887-9216-56d412aa447f\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///c19a389f-f388-4485-98bb-0f329eff7e27\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5be6e2ba-fabc-4887-9216-56d412aa447f\"},{\"filename\":\"/lib/server.js\",\"url\":\"blob:file:///b07b98ac-5df2-4333-9671-3f093f54d9b5\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5be6e2ba-fabc-4887-9216-56d412aa447f\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///c19a389f-f388-4485-98bb-0f329eff7e27\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5be6e2ba-fabc-4887-9216-56d412aa447f\"},{\"filename\":\"master.js\",\"url\":\"blob:file:///82999359-a318-4f03-af44-c67ceb1d5f99\"}],\"ramUsage\":17.6,\"server\":\"home\",\"_hash\":\"59bd5154d75e31b14b84d3e4aae9f2ed4bdda7b3f79c62854ff572df6c695e5c\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tselectTarget(ns);\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tawait coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(target.timeWeaken + 300);\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst wakeUpTimeSec = parseInt((target.timeWeaken + 300) / 1000);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(target.moneyAvailable);\\n\\tconst timeHack = Common.formatTime(target.timeHack);\\n\\tconst timeWeaken = Common.formatTime(target.timeWeaken);\\n\\tconst timeGrow = Common.formatTime(target.timeGrow);\\n\\tconst timeHackSec = parseInt(target.timeHack / 1000);\\n\\tconst timeWeakenSec = parseInt(target.timeWeaken / 1000);\\n\\tconst timeGrowSec = parseInt(target.timeGrow / 1000);\\n\\tconst delayHack = Common.formatTime(target.delayHack);\\n\\tconst delayGrow = Common.formatTime(target.delayGrow);\\n\\tconst delayHackSec = parseInt(target.delayHack / 1000);\\n\\tconst delayGrowSec = parseInt(target.delayGrow / 1000);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}`,\\n\\t\\t`  - Time to hack:    ${timeHack} [${timeHackSec} sec]`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken} [${timeWeakenSec} sec]`,\\n\\t\\t`  - Time to grow:    ${timeGrow} [${timeGrowSec} sec]`,\\n\\t\\t`  - Hack delay:      ${delayHack} [${delayHackSec} sec]`,\\n\\t\\t`  - Grow delay:      ${delayGrow} [${delayGrowSec} sec]`,\\n\\t\\t`  - Wake up time     ${wakeUpTime} [${wakeUpTimeSec} sec]`,\\n\\t];\\n\\n\\tCommon.say(ns, lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nfunction selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoPick) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tawait doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tawait doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tawait doAttackHack(ns);\\n\\t\\t\\tbreak;\\n\\t}\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function doAttackWeaken(ns) {\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tCommon.say(ns, lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tawait server.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tawait server.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"weaken\\\",\\n\\t\\t\\t\\tcyclesFittable,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\t0\\n\\t\\t\\t);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function doAttackGrow(ns) {\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tCommon.say(ns, lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tawait server.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tawait server.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"weaken\\\",\\n\\t\\t\\t\\tcyclesFittable,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\t0\\n\\t\\t\\t);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function doAttackHack(ns) {\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tCommon.say(ns, lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tawait server.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tawait server.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tawait server.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"weaken\\\",\\n\\t\\t\\t\\tcyclesFittable,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\t0\\n\\t\\t\\t);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n}\",\"filename\":\"chk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///1915325c-dda5-408e-ba38-0484b2514685\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///1915325c-dda5-408e-ba38-0484b2514685\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///ee0f17ab-d07e-4db4-8c5a-065472af5f33\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///f74a3b2c-31bc-4967-8005-26c0273a7ed8\"},{\"filename\":\"/lib/server.js\",\"url\":\"blob:file:///74175f44-6092-48c0-9cbb-dc75f8666c6d\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///ee0f17ab-d07e-4db4-8c5a-065472af5f33\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///f74a3b2c-31bc-4967-8005-26c0273a7ed8\"},{\"filename\":\"chk.js\",\"url\":\"blob:file:///bdd02307-f2ef-439c-ae61-5ef5055695df\"}],\"ramUsage\":17.5,\"server\":\"home\",\"_hash\":\"81ce7f6a8ce19990c6e40b04c0ba4295f8c041cb1ad3e7497427b4e228a8bb5c\",\"moduleSequenceNumber\":267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":268,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":270,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5be6e2ba-fabc-4887-9216-56d412aa447f\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///c19a389f-f388-4485-98bb-0f329eff7e27\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5be6e2ba-fabc-4887-9216-56d412aa447f\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///c19a389f-f388-4485-98bb-0f329eff7e27\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5be6e2ba-fabc-4887-9216-56d412aa447f\"},{\"filename\":\"/lib/server.js\",\"url\":\"blob:file:///b07b98ac-5df2-4333-9671-3f093f54d9b5\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5be6e2ba-fabc-4887-9216-56d412aa447f\"},{\"filename\":\"grow.js\",\"url\":\"blob:file:///ba644a3a-c56b-47b7-8bdd-e9649ff8c9be\"}],\"ramUsage\":24.1,\"server\":\"home\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Reads data from the config file and returns\\n * the full config object.\\n */\\nexport function getConfig(ns) {\\n\\tconst raw = ns.read(\\\"data.config\\\");\\n\\tconst def = {\\n\\t\\tstarted: false,\\n\\t\\ttarget: \\\"\\\",\\n\\t\\tautoTarget: true,\\n\\t\\thackAlgo: 'default', // default / hwgw\\n\\t\\tboundSec: 4,\\n\\t\\tboundMoney: 0.6,\\n\\t\\tlockedBudget: 0,\\n\\t\\tlockedRam: 0,\\n\\t};\\n\\n\\tif (raw) {\\n\\t\\ttry {\\n\\t\\t\\tconst config = JSON.parse(raw);\\n\\t\\t\\tconst result = {};\\n\\n\\t\\t\\tfor (const key in def) {\\n\\t\\t\\t\\tif (\\\"undefined\\\" !== typeof config[key]) {\\n\\t\\t\\t\\t\\tresult[key] = config[key];\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tresult[key] = def[key];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn result;\\n\\t\\t} catch (ex) {\\n\\t\\t\\tconsole.error(\\\"Cannot parse data.config file!\\\", ex.message);\\n\\t\\t}\\n\\t}\\n\\n\\treturn def;\\n}\\n\\n/**\\n * Save the updated config data.\\n */\\nexport async function setConfig(ns, config) {\\n\\tawait ns.write(\\\"data.config\\\", JSON.stringify(config), \\\"w\\\");\\n}\\n\\n/**\\n * Outputs a terminal message with a timestamp.\\n */\\nexport function say(ns, ...msg) {\\n\\tns.tprint(`${timestamp()} | ${msg.join(\\\" | \\\")}`);\\n}\\n\\n/**\\n * Outputs a log message with a timestamp.\\n */\\nexport function log(ns, ...msg) {\\n\\tns.print(`${timestamp()} | ${msg.join(\\\" | \\\")}`);\\n}\\n\\n/**\\n * Returns a formatted timestamp, for logging.\\n */\\nexport function timestamp(delay = 0) {\\n\\tlet date;\\n\\n\\tif (delay) {\\n\\t\\tdate = new Date(Date.now() + delay);\\n\\t} else {\\n\\t\\tdate = new Date();\\n\\t}\\n\\n\\treturn date.toISOString().substring(11, 19);\\n}\\n\\nexport function formatMoney(ns, value) {\\n\\treturn ns.nFormat(parseInt(value), \\\"$0.000a\\\");\\n}\",\"filename\":\"/lib/common.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"947f1b4b90022f8b9ee71ce8cff19e3e1ce941af5952c290162dca3cdb107579\",\"moduleSequenceNumber\":272,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\n\\n/**\\n * The player instance (singleton)\\n */\\nlet inst = null;\\n\\n/**\\n * Player accessor.\\n */\\nexport function get(ns) {\\n\\tif (!inst) {\\n\\t\\tinst = new Player(ns);\\n\\t}\\n\\n\\tinst.refresh(ns);\\n\\tinst.refreshPrograms(ns);\\n\\n\\treturn inst;\\n}\\n\\n/**\\n * Applies a callback to every program.\\n */\\nexport function programs(callback) {\\n\\t[\\n\\t\\t{\\n\\t\\t\\tport: \\\"sshPortOpen\\\",\\n\\t\\t\\tfile: \\\"BruteSSH.exe\\\",\\n\\t\\t\\tcmd: \\\"brutessh\\\",\\n\\t\\t\\tcost: 500000,\\n\\t\\t\\tlevel: 50,\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tport: \\\"ftpPortOpen\\\",\\n\\t\\t\\tfile: \\\"FTPCrack.exe\\\",\\n\\t\\t\\tcmd: \\\"ftpcrack\\\",\\n\\t\\t\\tcost: 1.5,\\n\\t\\t\\tlevel: 100,\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tport: \\\"smtpPortOpen\\\",\\n\\t\\t\\tfile: \\\"relaySMTP.exe\\\",\\n\\t\\t\\tcmd: \\\"relaysmtp\\\",\\n\\t\\t\\tcost: 5000000,\\n\\t\\t\\tlevel: 250,\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tport: \\\"httpPortOpen\\\",\\n\\t\\t\\tfile: \\\"HTTPWorm.exe\\\",\\n\\t\\t\\tcmd: \\\"httpworm\\\",\\n\\t\\t\\tcost: 30000000,\\n\\t\\t\\tlevel: 500,\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tport: \\\"sqlPortOpen\\\",\\n\\t\\t\\tfile: \\\"SQLInject.exe\\\",\\n\\t\\t\\tcmd: \\\"sqlinject\\\",\\n\\t\\t\\tcost: 250000000,\\n\\t\\t\\tlevel: 750,\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tfile: \\\"ServerProfiler.exe\\\",\\n\\t\\t\\tcost: 500000,\\n\\t\\t\\tlevel: 75,\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tfile: \\\"DeepscanV1.exe\\\",\\n\\t\\t\\tcost: 500000,\\n\\t\\t\\tlevel: 75,\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tfile: \\\"DeepscanV2.exe\\\",\\n\\t\\t\\tcost: 25000000,\\n\\t\\t\\tlevel: 400,\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tfile: \\\"AutoLink.exe\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t\\tlevel: 25,\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tfile: \\\"Formulas.exe\\\",\\n\\t\\t\\tcost: 5000000000,\\n\\t\\t},\\n\\t].forEach(callback);\\n}\\n\\nclass Player {\\n\\t/**\\n\\t * Initialize the player object.\\n\\t */\\n\\tconstructor(ns) {}\\n\\n\\t/**\\n\\t * Refresh details about the player.\\n\\t */\\n\\trefresh(ns) {\\n\\t\\tconst info = ns.getPlayer();\\n\\n\\t\\tthis.agility_exp_mult = info.agility_exp_mult;\\n\\t\\tthis.agility_exp = info.agility_exp;\\n\\t\\tthis.agility_mult = info.agility_mult;\\n\\t\\tthis.agility = info.agility;\\n\\t\\tthis.bitNodeN = info.bitNodeN;\\n\\t\\tthis.bladeburner_analysis_mult = info.bladeburner_analysis_mult;\\n\\t\\tthis.bladeburner_max_stamina_mult = info.bladeburner_max_stamina_mult;\\n\\t\\tthis.bladeburner_stamina_gain_mult = info.bladeburner_stamina_gain_mult;\\n\\t\\tthis.bladeburner_success_chance_mult =\\n\\t\\t\\tinfo.bladeburner_success_chance_mult;\\n\\t\\tthis.charisma_exp_mult = info.charisma_exp_mult;\\n\\t\\tthis.charisma_exp = info.charisma_exp;\\n\\t\\tthis.charisma_mult = info.charisma_mult;\\n\\t\\tthis.charisma = info.charisma;\\n\\t\\tthis.city = info.city;\\n\\t\\tthis.className = info.className;\\n\\t\\tthis.company_rep_mult = info.company_rep_mult;\\n\\t\\tthis.companyName = info.companyName;\\n\\t\\tthis.createProgramName = info.createProgramName;\\n\\t\\tthis.createProgramReqLvl = info.createProgramReqLvl;\\n\\t\\tthis.crime_money_mult = info.crime_money_mult;\\n\\t\\tthis.crime_success_mult = info.crime_success_mult;\\n\\t\\tthis.crimeType = info.crimeType;\\n\\t\\tthis.currentWorkFactionDescription = info.currentWorkFactionDescription;\\n\\t\\tthis.currentWorkFactionName = info.currentWorkFactionName;\\n\\t\\tthis.defense_exp_mult = info.defense_exp_mult;\\n\\t\\tthis.defense_exp = info.defense_exp;\\n\\t\\tthis.defense_mult = info.defense_mult;\\n\\t\\tthis.defense = info.defense;\\n\\t\\tthis.dexterity_exp_mult = info.dexterity_exp_mult;\\n\\t\\tthis.dexterity_exp = info.dexterity_exp;\\n\\t\\tthis.dexterity_mult = info.dexterity_mult;\\n\\t\\tthis.dexterity = info.dexterity;\\n\\t\\tthis.faction_rep_mult = info.faction_rep_mult;\\n\\t\\tthis.factions = info.factions;\\n\\t\\tthis.hacking_chance_mult = info.hacking_chance_mult;\\n\\t\\tthis.hacking_exp_mult = info.hacking_exp_mult;\\n\\t\\tthis.hacking_exp = info.hacking_exp;\\n\\t\\tthis.hacking_grow_mult = info.hacking_grow_mult;\\n\\t\\tthis.hacking_money_mult = info.hacking_money_mult;\\n\\t\\tthis.hacking_mult = info.hacking_mult;\\n\\t\\tthis.hacking_speed_mult = info.hacking_speed_mult;\\n\\t\\tthis.hacking = info.hacking;\\n\\t\\tthis.hacknet_node_core_cost_mult = info.hacknet_node_core_cost_mult;\\n\\t\\tthis.hacknet_node_level_cost_mult = info.hacknet_node_level_cost_mult;\\n\\t\\tthis.hacknet_node_money_mult = info.hacknet_node_money_mult;\\n\\t\\tthis.hacknet_node_purchase_cost_mult =\\n\\t\\t\\tinfo.hacknet_node_purchase_cost_mult;\\n\\t\\tthis.hacknet_node_ram_cost_mult = info.hacknet_node_ram_cost_mult;\\n\\t\\tthis.has4SData = info.has4SData;\\n\\t\\tthis.has4SDataTixApi = info.has4SDataTixApi;\\n\\t\\tthis.hasTixApiAccess = info.hasTixApiAccess;\\n\\t\\tthis.hasWseAccount = info.hasWseAccount;\\n\\t\\tthis.hp = info.hp;\\n\\t\\tthis.intelligence = info.intelligence;\\n\\t\\tthis.isWorking = info.isWorking;\\n\\t\\tthis.jobs = info.jobs;\\n\\t\\tthis.location = info.location;\\n\\t\\tthis.max_hp = info.max_hp;\\n\\t\\tthis.money = info.money;\\n\\t\\tthis.numPeopleKilled = info.numPeopleKilled;\\n\\t\\tthis.playtimeSinceLastAug = info.playtimeSinceLastAug;\\n\\t\\tthis.playtimeSinceLastBitnode = info.playtimeSinceLastBitnode;\\n\\t\\tthis.strength_exp_mult = info.strength_exp_mult;\\n\\t\\tthis.strength_exp = info.strength_exp;\\n\\t\\tthis.strength_mult = info.strength_mult;\\n\\t\\tthis.strength = info.strength;\\n\\t\\tthis.tor = info.tor;\\n\\t\\tthis.totalPlaytime = info.totalPlaytime;\\n\\t\\tthis.work_money_mult = info.work_money_mult;\\n\\t\\tthis.workAgiExpGained = info.workAgiExpGained;\\n\\t\\tthis.workAgiExpGainRate = info.workAgiExpGainRate;\\n\\t\\tthis.workChaExpGained = info.workChaExpGained;\\n\\t\\tthis.workChaExpGainRate = info.workChaExpGainRate;\\n\\t\\tthis.workDefExpGained = info.workDefExpGained;\\n\\t\\tthis.workDefExpGainRate = info.workDefExpGainRate;\\n\\t\\tthis.workDexExpGained = info.workDexExpGained;\\n\\t\\tthis.workDexExpGainRate = info.workDexExpGainRate;\\n\\t\\tthis.workHackExpGained = info.workHackExpGained;\\n\\t\\tthis.workHackExpGainRate = info.workHackExpGainRate;\\n\\t\\tthis.workMoneyGained = info.workMoneyGained;\\n\\t\\tthis.workMoneyGainRate = info.workMoneyGainRate;\\n\\t\\tthis.workMoneyLossRate = info.workMoneyLossRate;\\n\\t\\tthis.workRepGained = info.workRepGained;\\n\\t\\tthis.workRepGainRate = info.workRepGainRate;\\n\\t\\tthis.workStrExpGained = info.workStrExpGained;\\n\\t\\tthis.workStrExpGainRate = info.workStrExpGainRate;\\n\\t\\tthis.workType = info.workType;\\n\\t}\\n\\n\\t/**\\n\\t * Checks, which programs are available to the player.\\n\\t */\\n\\trefreshPrograms(ns) {\\n\\t\\tthis.listPortOpeners = [];\\n\\t\\tthis.listPrograms = [];\\n\\n\\t\\tprograms((tool) => {\\n\\t\\t\\tif (ns.fileExists(tool.file, \\\"home\\\")) {\\n\\t\\t\\t\\tthis.listPrograms.push(tool.file.toLowerCase());\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (tool.port && this.hasProgram(tool.file)) {\\n\\t\\t\\t\\tthis.listPortOpeners.push(tool);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\t/**\\n\\t * Checks, if the player owns a specific program.\\n\\t */\\n\\thasProgram(name) {\\n\\t\\treturn -1 !== this.listPrograms.indexOf(name.toLowerCase());\\n\\t}\\n\\n\\t/**\\n\\t * Passes each available port opener to a callback.\\n\\t */\\n\\tportOpeners(callback) {\\n\\t\\tthis.listPortOpeners.forEach(callback);\\n\\t}\\n}\",\"filename\":\"/lib/player.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.2,\"server\":\"home\",\"_hash\":\"20d98dab3f721ba057d0f1a6e95823f529d29d6beb8fc2707a5d85ad33498755\",\"moduleSequenceNumber\":273,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * List of all Server instances.\\n */\\nlet servers = {};\\n\\n/**\\n * Game configuration.\\n */\\nlet config = {};\\n\\n/**\\n * List of services that need to constantly run\\n * on the home server.\\n */\\nconst serviceFiles = [\\\"attk.js\\\", \\\"grow.js\\\"];\\n\\n/**\\n * List of all scripts that are required by our system.\\n */\\nconst allFiles = [\\n\\t\\\"attk.js\\\",\\n\\t\\\"grow.js\\\",\\n\\t\\\"run-hack.js\\\",\\n\\t\\\"run-grow.js\\\",\\n\\t\\\"run-weaken.js\\\",\\n];\\n\\n/**\\n * Add a new server to the server list.\\n * When the server already exists, nothing happens.\\n */\\nfunction register(ns, host, route) {\\n\\tif (servers[host]) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\tnew Server(ns, host, route);\\n\\treturn true;\\n}\\n\\n/**\\n * Shares the Netscript instance with this module and\\n * initializes the server list.\\n *\\n * @param {NS} ns\\n */\\nexport async function initialize(ns) {\\n\\tconfig = Common.getConfig(ns);\\n\\tservers = {};\\n\\tregister(ns, \\\"home\\\", []);\\n\\tawait all((server) => server.setup(ns));\\n}\\n\\n/**\\n * Runs a callback against every known server.\\n */\\nexport async function all(callback) {\\n\\tfor (const key in servers) {\\n\\t\\tawait callback(servers[key]);\\n\\t}\\n}\\n\\n/**\\n * Runs a callback against every available attacker server.\\n * Attackers are servers that we have root access to and that\\n * are equipped with a minimum of 2GB RAM.\\n */\\nexport async function allAttackers(callback) {\\n\\tfor (const key in servers) {\\n\\t\\tif (servers[key].isAttacker) {\\n\\t\\t\\tawait callback(servers[key]);\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * Return a server instance by host name.\\n */\\nexport function get(host, stat) {\\n\\tconst server = servers[host];\\n\\n\\tif (server && stat) {\\n\\t\\treturn server[stat];\\n\\t} else {\\n\\t\\treturn server;\\n\\t}\\n}\\n\\n/**\\n * Purchase a new server with the given amount of RAM.\\n */\\nexport async function purchase(ns, host, ram) {\\n\\tconst newHost = ns.purchaseServer(host, ram);\\n\\n\\tif (newHost) {\\n\\t\\tregister(ns, newHost, [\\\"home\\\"]);\\n\\t\\tconst inst = get(newHost);\\n\\t\\tawait inst.setup(ns);\\n\\t}\\n\\n\\treturn !!newHost;\\n}\\n\\n/**\\n * Delete the specified server\\n */\\nexport async function upgrade(ns, host, ram) {\\n\\tns.killall(host);\\n\\n\\tif (ns.deleteServer(host)) {\\n\\t\\treturn await purchase(ns, host, ram);\\n\\t} else {\\n\\t\\treturn false;\\n\\t}\\n}\\n\\n/**\\n * Return the most profitable server for hacking.\\n */\\nexport function byProfit(ns) {\\n\\tconst player = Player.get(ns);\\n\\tlet selected = null;\\n\\n\\tfor (const key in servers) {\\n\\t\\tconst server = servers[key];\\n\\n\\t\\tif (server.requiredHackingSkill > player.hacking) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tif (!selected || selected.profitRating < server.profitRating) {\\n\\t\\t\\tselected = server;\\n\\t\\t}\\n\\t}\\n\\n\\treturn selected;\\n}\\n\\nclass Server {\\n\\t/**\\n\\t * Initialize the new Server instance.\\n\\t */\\n\\tconstructor(ns, host, route) {\\n\\t\\tservers[host] = this;\\n\\n\\t\\tthis.hostname = host;\\n\\t\\tthis.route = [...route, host];\\n\\t\\tthis.connections = [];\\n\\t\\tthis.children = [];\\n\\t\\tthis.attackCount = 0;\\n\\n\\t\\t// Collect details about the server.\\n\\t\\tthis.refresh(ns);\\n\\t\\tthis.refreshConnections(ns);\\n\\t}\\n\\n\\t/**\\n\\t * Refresh all server details.\\n\\t */\\n\\trefresh(ns) {\\n\\t\\tconst info = ns.getServer(this.hostname);\\n\\n\\t\\t// Initial server security level (i.e. security level when the server was created)\\n\\t\\tthis.baseDifficulty = info.baseDifficulty;\\n\\t\\t// How many CPU cores this server has. Maximum of 8. Affects magnitude of grow and weaken.\\n\\t\\tthis.cpuCores = info.cpuCores;\\n\\t\\t// IP Address. Must be unique\\n\\t\\tthis.ip = info.ip;\\n\\t\\t// Minimum server security level that this server can be weakened to\\n\\t\\tthis.minDifficulty = info.minDifficulty;\\n\\t\\t// Maximum amount of money that this server can hold\\n\\t\\tthis.moneyMax = info.moneyMax;\\n\\t\\t// Number of open ports required in order to gain admin/root access\\n\\t\\tthis.numOpenPortsRequired = info.numOpenPortsRequired;\\n\\t\\t// Name of company/faction/etc. that this server belongs to. Optional, not applicable to all Servers\\n\\t\\tthis.organizationName = info.organizationName;\\n\\t\\t// Flag indicating whether this is a purchased server\\n\\t\\tthis.purchasedByPlayer = info.purchasedByPlayer;\\n\\t\\t// Hacking level required to hack this server\\n\\t\\tthis.requiredHackingSkill = info.requiredHackingSkill;\\n\\t\\t// Parameter that affects how effectively this server's money can be increased using the grow() Netscript function\\n\\t\\tthis.serverGrowth = info.serverGrowth;\\n\\n\\t\\tthis.refreshRam(ns);\\n\\t\\tthis.refreshAccess(ns);\\n\\t\\tthis.refreshStats(ns);\\n\\t}\\n\\n\\t/**\\n\\t * Refresh details about the servers RAM usage.\\n\\t */\\n\\trefreshRam(ns) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tconst ram = ns.getServerRam(this.hostname);\\n\\n\\t\\t// RAM (GB) available on this server\\n\\t\\tthis.ramMax = ram[0];\\n\\t\\tthis.ramTotalMax = ram[0];\\n\\n\\t\\t// On home server, reserve some RAM for the master script and tools.\\n\\t\\tif (\\\"home\\\" === this.hostname) {\\n\\t\\t\\tconst reserved = Math.max(20, parseFloat(config.lockedRam));\\n\\t\\t\\tthis.ramMax = Math.max(0, this.ramMax - reserved);\\n\\t\\t}\\n\\n\\t\\t// RAM (GB) used. i.e. unavailable RAM\\n\\t\\tthis.ramUsed = ram[1];\\n\\t\\t// RAM (GB) free. i.e. available RAM\\n\\t\\tthis.ramFree = Math.max(0, this.ramMax - this.ramUsed);\\n\\n\\t\\tif (this.ramMax < 2) {\\n\\t\\t\\tthis.isAttacker = false;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Refreshes the list of open ports/root access flag.\\n\\t */\\n\\trefreshAccess(ns) {\\n\\t\\tconst info = ns.getServer(this.hostname);\\n\\n\\t\\t// Flag indicating whether player is currently connected to this server\\n\\t\\tthis.isConnectedTo = info.isConnectedTo;\\n\\t\\t// Flag indicating whether this server has a backdoor installed by a player\\n\\t\\tthis.backdoorInstalled = info.backdoorInstalled;\\n\\t\\t// Flag indicating whether the FTP port is open\\n\\t\\tthis.ftpPortOpen = info.ftpPortOpen;\\n\\t\\t// Flag indicating whether player has admin/root access to this server\\n\\t\\tthis.hasAdminRights = info.hasAdminRights;\\n\\t\\t// Flag indicating whether HTTP Port is open\\n\\t\\tthis.httpPortOpen = info.httpPortOpen;\\n\\t\\t// How many ports are currently opened on the server\\n\\t\\tthis.openPortCount = info.openPortCount;\\n\\t\\t// Flag indicating whether SMTP Port is open\\n\\t\\tthis.smtpPortOpen = info.smtpPortOpen;\\n\\t\\t// Flag indicating whether SQL Port is open\\n\\t\\tthis.sqlPortOpen = info.sqlPortOpen;\\n\\t\\t// Flag indicating whether the SSH Port is open\\n\\t\\tthis.sshPortOpen = info.sshPortOpen;\\n\\n\\t\\t// Check, if we can use this server to attack other servers.\\n\\t\\tif (!isNaN(this.ramMax) && this.ramMax > 2) {\\n\\t\\t\\tthis.isAttacker = this.purchasedByPlayer || this.hasAdminRights;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Refresh details about the servers attack stats.\\n\\t *\\n\\t * The times change after each hack/grow/weaken call\\n\\t * and need to be refreshed constantly.\\n\\t */\\n\\trefreshStats(ns) {\\n\\t\\t// Server Security Level\\n\\t\\tthis.hackDifficulty = ns.getServerSecurityLevel(this.hostname);\\n\\n\\t\\t// How much money currently resides on the server and can be hacked\\n\\t\\tthis.moneyAvailable = ns.getServerMoneyAvailable(this.hostname);\\n\\n\\t\\tconst timeHack = ns.getHackTime(this.hostname);\\n\\t\\tconst timeGrow = ns.getGrowTime(this.hostname);\\n\\t\\tconst timeWeaken = ns.getWeakenTime(this.hostname);\\n\\n\\t\\tthis.timeHack = timeHack;\\n\\t\\tthis.timeGrow = timeGrow;\\n\\t\\tthis.timeWeaken = timeWeaken;\\n\\n\\t\\t// Part of money that's stolen in a single hack thread. E.g. 0.01 is 1% of moneyAvailable\\n\\t\\tthis.hackAnalyze = ns.hackAnalyze(this.hostname);\\n\\n\\t\\tthis.delayGrow = Math.max(0, timeWeaken - timeGrow - 15);\\n\\t\\tthis.delayHack = Math.max(0, timeGrow + this.delayGrow - timeHack - 15);\\n\\n\\t\\tthis.refreshRating();\\n\\t}\\n\\n\\t/**\\n\\t * Re-calculates the profit rating of this server, which\\n\\t * is used to determine the most suitable server for attacking.\\n\\t */\\n\\trefreshRating() {\\n\\t\\tthis.profitRating = 0;\\n\\n\\t\\tif (\\n\\t\\t\\tthis.purchasedByPlayer ||\\n\\t\\t\\t!this.hasAdminRights ||\\n\\t\\t\\t!this.hackDifficulty ||\\n\\t\\t\\t!this.minDifficulty\\n\\t\\t) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst rateMoney = this.moneyMax + this.moneyAvailable / 10;\\n\\t\\tconst avgTime =\\n\\t\\t\\t(this.timeGrow + this.timeHack + 2 * this.timeWeaken) / 4;\\n\\t\\tconst minTime = (avgTime / this.hackDifficulty) * this.minDifficulty;\\n\\n\\t\\tthis.profitRating = rateMoney / minTime;\\n\\t}\\n\\n\\t/**\\n\\t * Scan for connected servers and store a list of\\n\\t * available server names in the \\\"connections\\\" property.\\n\\t */\\n\\trefreshConnections(ns) {\\n\\t\\t// An array containing the hostnames of all servers that are one node way from this server.\\n\\t\\tthis.connections = ns.scan(this.hostname);\\n\\t\\tthis.children = [];\\n\\n\\t\\t// Create instances of all connected servers.\\n\\t\\tthis.connections.forEach((host) => {\\n\\t\\t\\tregister(ns, host, [...this.route]);\\n\\n\\t\\t\\tif (-1 === this.route.indexOf(host)) {\\n\\t\\t\\t\\tthis.children.push(host);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\t/**\\n\\t * Set up everything so this server can be used for\\n\\t * attacks: Establish root access, copy files, start\\n\\t * relevant services.\\n\\t */\\n\\tasync setup(ns) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\t// Get root access.\\n\\t\\tthis.access(ns);\\n\\n\\t\\t// Install our scripts on the server.\\n\\t\\tawait this.installTools(ns);\\n\\n\\t\\t// Start or stop services on home.\\n\\t\\tif (\\\"home\\\" === this.hostname) {\\n\\t\\t\\tif (config.started) {\\n\\t\\t\\t\\tthis.startServices(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.stopServices(ns);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Refresh all server details.\\n\\t\\tthis.refresh(ns);\\n\\t\\tthis.refreshConnections(ns);\\n\\t}\\n\\n\\t/**\\n\\t * Opens all ports on the server and establishes root\\n\\t * access. If possible, also installs the backdoor.\\n\\t */\\n\\taccess(ns) {\\n\\t\\tif (this.purchasedByPlayer) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tlet changed = false;\\n\\t\\tconst player = Player.get(ns);\\n\\n\\t\\tplayer.portOpeners((tool) => {\\n\\t\\t\\tif (!this[tool.port]) {\\n\\t\\t\\t\\tns[tool.cmd](this.hostname);\\n\\t\\t\\t\\tchanged = true;\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tif (changed) {\\n\\t\\t\\tthis.refreshAccess(ns);\\n\\t\\t}\\n\\n\\t\\tif (\\n\\t\\t\\tthis.numOpenPortsRequired > this.openPortCount ||\\n\\t\\t\\tthis.requiredHackingSkill > player.hacking\\n\\t\\t) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (!this.hasAdminRights) {\\n\\t\\t\\tns.nuke(this.hostname);\\n\\n\\t\\t\\tthis.refreshAccess(ns);\\n\\t\\t}\\n\\n\\t\\tif (this.hasAdminRights && !this.backdoorInstalled) {\\n\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t// ns.installBackdoor(this.hostname);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Installs hacking tools on this server.\\n\\t */\\n\\tasync installTools(ns) {\\n\\t\\tif (\\\"home\\\" === this.hostname || !this.hasAdminRights) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Copy/Replace tools to remote server.\\n\\t\\tfor (let i = 0; i < allFiles.length; i++) {\\n\\t\\t\\tconst script = allFiles[i];\\n\\n\\t\\t\\tif (!ns.fileExists(script, this.hostname)) {\\n\\t\\t\\t\\tawait ns.scp(script, \\\"home\\\", this.hostname);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Uninstalls hacking tools from this server.\\n\\t */\\n\\tasync uninstallTools(ns) {\\n\\t\\tif (\\\"home\\\" === this.hostname || !this.hasAdminRights) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Delete files from server.\\n\\t\\tfor (let i = 0; i < allFiles.length; i++) {\\n\\t\\t\\tconst script = allFiles[i];\\n\\n\\t\\t\\tif (ns.fileExists(script, this.hostname)) {\\n\\t\\t\\t\\tns.scriptKill(script, this.hostname);\\n\\t\\t\\t\\tconst res = ns.rm(script, this.hostname);\\n\\n\\t\\t\\t\\tif (res) {\\n\\t\\t\\t\\t\\tCommon.say(ns, \\\"Uninstalled\\\", this.hostname, script);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Starts all stopped services on this machine.\\n\\t */\\n\\tstartServices(ns) {\\n\\t\\tfor (let i = 0; i < serviceFiles.length; i++) {\\n\\t\\t\\tconst script = serviceFiles[i];\\n\\n\\t\\t\\tif (\\n\\t\\t\\t\\tns.fileExists(script, this.hostname) &&\\n\\t\\t\\t\\t!ns.isRunning(script, this.hostname)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tCommon.say(ns, \\\"Start service\\\", script);\\n\\t\\t\\t\\tns.exec(script, this.hostname);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Stops all running services on this machine.\\n\\t */\\n\\tstopServices(ns) {\\n\\t\\tfor (let i = 0; i < serviceFiles.length; i++) {\\n\\t\\t\\tconst script = serviceFiles[i];\\n\\n\\t\\t\\tif (ns.isRunning(script, this.hostname)) {\\n\\t\\t\\t\\tCommon.say(ns, \\\"Stop service\\\", script);\\n\\t\\t\\t\\tns.kill(script, this.hostname);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Calculate maximum number of threads a given script\\n\\t * can take up on the current server.\\n\\t */\\n\\tcalcThreads(ns, script, maxPossible = false) {\\n\\t\\tif (!ns.fileExists(script, this.hostname)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tconst ramNeeded = ns.getScriptRam(script, this.hostname);\\n\\t\\tconst base = maxPossible ? this.ramMax : this.ramFree;\\n\\n\\t\\treturn Math.max(0, Math.floor(base / ramNeeded));\\n\\t}\\n\\n\\t/**\\n\\t * Runs an attack script.\\n\\t *\\n\\t * @param {NS} ns\\n\\t * @param {string} type\\n\\t * @param {int} threads\\n\\t * @param {string} targetHost\\n\\t * @param {int} delay\\n\\t * @return {bool} True on success.\\n\\t */\\n\\tattack(ns, type, threads, targetHost, delay) {\\n\\t\\tthreads = Math.max(1, Math.ceil(threads) || 1);\\n\\t\\tdelay = Math.max(1, Math.ceil(delay) || 1);\\n\\n\\t\\tconst pid = `${type}-${this.attackCount}`;\\n\\t\\tconst script = `run-${type}.js`;\\n\\n\\t\\tthis.attackCount++;\\n\\t\\tif (this.attackCount > 999999) {\\n\\t\\t\\tthis.attackCount = 0;\\n\\t\\t}\\n\\n\\t\\tif (!ns.fileExists(script, this.hostname)) {\\n\\t\\t\\tconsole.error(\\n\\t\\t\\t\\t`Could not start an attack from ${this.hostname} against ${targetHost}`,\\n\\t\\t\\t\\t`| The attack-script \\\"${script}\\\" does not exist`\\n\\t\\t\\t);\\n\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst ramRequired = ns.getScriptRam(script, this.hostname) * threads;\\n\\t\\tif (this.ramFree < ramRequired) {\\n\\t\\t\\tconsole.error(\\n\\t\\t\\t\\t`Could not start an attack from ${this.hostname} against ${targetHost}`,\\n\\t\\t\\t\\t`| Not sufficient RAM to run ${threads} threads of \\\"${script}\\\"`,\\n\\t\\t\\t\\t`| Available RAM ${this.ramFree}`\\n\\t\\t\\t);\\n\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tconst res = ns.exec(\\n\\t\\t\\tscript,\\n\\t\\t\\tthis.hostname,\\n\\t\\t\\tthreads,\\n\\t\\t\\ttargetHost,\\n\\t\\t\\tthreads,\\n\\t\\t\\tdelay,\\n\\t\\t\\tpid\\n\\t\\t);\\n\\n\\t\\tif (!res) {\\n\\t\\t\\tconsole.error(\\n\\t\\t\\t\\t`Could not start an attack from ${this.hostname} against ${targetHost}`,\\n\\t\\t\\t\\t`| Executing the script ${script} failed`,\\n\\t\\t\\t\\t`| Threads: ${threads}`,\\n\\t\\t\\t\\t`| Delay: ${delay}`\\n\\t\\t\\t);\\n\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * Returns an analytics report of the server.\\n\\t *\\n\\t * @param {NS} ns\\n\\t * @return {string} Multiline string with server details.\\n\\t */\\n\\tanalyze(ns) {\\n\\t\\tconst details = {};\\n\\t\\tconst route = [...this.route];\\n\\n\\t\\tconst percent = (max, current) => {\\n\\t\\t\\tif (!max) {\\n\\t\\t\\t\\treturn \\\"--%\\\";\\n\\t\\t\\t}\\n\\t\\t\\treturn Math.min((current / max) * 100, 100).toFixed(2) + \\\"%\\\";\\n\\t\\t};\\n\\n\\t\\troute.shift();\\n\\n\\t\\tdetails[\\\"Path\\\"] = route.length ? route.join(\\\" → \\\") : \\\"-\\\";\\n\\n\\t\\tdetails[\\\"RAM\\\"] =\\n\\t\\t\\t`${this.ramUsed.toFixed(2)} GB / ` +\\n\\t\\t\\t`${this.ramTotalMax.toFixed(2)} GB ` +\\n\\t\\t\\t`(${percent(this.ramTotalMax, this.ramUsed)})`;\\n\\n\\t\\tdetails[\\\"Money\\\"] =\\n\\t\\t\\t`${Common.formatMoney(ns, this.moneyAvailable)} / ` +\\n\\t\\t\\t`${Common.formatMoney(ns, this.moneyMax)} ` +\\n\\t\\t\\t`(${percent(this.moneyMax, this.moneyAvailable)})`;\\n\\n\\t\\tdetails[\\\"Security\\\"] =\\n\\t\\t\\tthis.hackDifficulty.toFixed(2) +\\n\\t\\t\\t\\\" / \\\" +\\n\\t\\t\\tthis.minDifficulty.toFixed(2);\\n\\t\\tdetails[\\\"Hack Time\\\"] = ns.tFormat(this.timeHack);\\n\\t\\tdetails[\\\"Grow Time\\\"] = ns.tFormat(this.timeGrow);\\n\\t\\tdetails[\\\"Weaken Time\\\"] = ns.tFormat(this.timeWeaken);\\n\\t\\tdetails[\\\"Organization\\\"] = this.organizationName;\\n\\t\\tdetails[\\\"Required Skill\\\"] = this.requiredHackingSkill;\\n\\t\\tdetails[\\\"Open Ports\\\"] =\\n\\t\\t\\tthis.openPortCount + \\\" / \\\" + this.numOpenPortsRequired;\\n\\t\\tdetails[\\\"Root Access\\\"] = this.hasAdminRights ? \\\"yes\\\" : \\\"no\\\";\\n\\t\\tdetails[\\\"Has Backdoor\\\"] = this.backdoorInstalled ? \\\"yes\\\" : \\\"no\\\";\\n\\n\\t\\tconst keyLen = Math.max(...Object.keys(details).map((el) => el.length));\\n\\t\\tconst infos = [];\\n\\n\\t\\tinfos.push(`Server: ${this.hostname}`);\\n\\n\\t\\tfor (const key in details) {\\n\\t\\t\\tinfos.push(\\n\\t\\t\\t\\t\\\"  \\\" +\\n\\t\\t\\t\\t\\tkey +\\n\\t\\t\\t\\t\\t\\\" \\\".repeat(keyLen - key.length) +\\n\\t\\t\\t\\t\\t\\\" : \\\" +\\n\\t\\t\\t\\t\\tdetails[key]\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tinfos.push(`  > ${this.cmdConnect()}`);\\n\\n\\t\\treturn infos.join(\\\"\\\\n\\\");\\n\\t}\\n\\n\\t/**\\n\\t * Returns the command to connect to this server.\\n\\t */\\n\\tcmdConnect() {\\n\\t\\tconst route = [...this.route];\\n\\t\\troute.shift();\\n\\n\\t\\treturn `home; connect ${route.join(\\\"; connect \\\")}`;\\n\\t}\\n}\",\"filename\":\"/lib/server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"home\",\"_hash\":\"a4e026396f65364ac6fc1e829e0f60ebd44b758b48da90e2208e736e36490988\",\"moduleSequenceNumber\":274,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { formatMoney } from \\\"lib/common.js\\\";\\n\\nconst target = \\\"n00dles\\\";\\n\\nconst tests = [\\n\\t{\\n\\t\\tactive: false,\\n\\t\\tinfo: \\\"1 batch of 1 hack (direct)\\\",\\n\\t\\tthreads: 1,\\n\\t\\trunner: async (ns) => {\\n\\t\\t\\tconst profit = await ns.hack(target);\\n\\t\\t\\tawait ns.writePort(1, profit);\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tactive: false,\\n\\t\\tinfo: \\\"1 batch of 1 hack (exec)\\\",\\n\\t\\tthreads: 1,\\n\\t\\trunner: async (ns) => {\\n\\t\\t\\tconst timeHack = getTime(ns.getHackTime(target));\\n\\t\\t\\tns.exec(\\\"run-hack.js\\\", \\\"home\\\", 1, target);\\n\\t\\t\\tawait ns.sleep(timeHack);\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tactive: false,\\n\\t\\tinfo: \\\"1 batch of 100 hack (exec)\\\",\\n\\t\\tthreads: 100,\\n\\t\\trunner: async (ns) => {\\n\\t\\t\\tconst timeHack = getTime(ns.getHackTime(target));\\n\\t\\t\\tns.exec(\\\"run-hack.js\\\", \\\"home\\\", 100, target);\\n\\t\\t\\tawait ns.sleep(timeHack);\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tactive: false,\\n\\t\\tinfo: \\\"5 batches of 20 hack (exec)\\\",\\n\\t\\tthreads: 100,\\n\\t\\trunner: async (ns) => {\\n\\t\\t\\tconst timeHack = getTime(ns.getHackTime(target)) + 100;\\n\\t\\t\\tns.exec(\\\"run-hack.js\\\", \\\"home\\\", 20, target, 20, 20);\\n\\t\\t\\tns.exec(\\\"run-hack.js\\\", \\\"home\\\", 20, target, 20, 40);\\n\\t\\t\\tns.exec(\\\"run-hack.js\\\", \\\"home\\\", 20, target, 20, 60);\\n\\t\\t\\tns.exec(\\\"run-hack.js\\\", \\\"home\\\", 20, target, 20, 80);\\n\\t\\t\\tns.exec(\\\"run-hack.js\\\", \\\"home\\\", 20, target, 20, 100);\\n\\t\\t\\tawait ns.sleep(timeHack);\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tactive: false,\\n\\t\\tinfo: \\\"1 WWHG batch\\\",\\n\\t\\tthreads: 1,\\n\\t\\trunner: async (ns) => {\\n\\t\\t\\tconst timeWeaken = getTime(ns.getWeakenTime(target));\\n\\t\\t\\tconst timeGrow = getTime(ns.getGrowTime(target));\\n\\t\\t\\tconst timeHack = getTime(ns.getHackTime(target));\\n\\t\\t\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\t\\t\\tlet batches = 0;\\n\\n\\t\\t\\tconst runBatch = (delay) => {\\n\\t\\t\\t\\tlet startHack = maxTime - timeHack;\\n\\t\\t\\t\\tlet startWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\t\\t\\tlet startGrow = 40 + maxTime - timeGrow;\\n\\t\\t\\t\\tlet startWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\t\\t\\tconst minStart = Math.min(\\n\\t\\t\\t\\t\\tstartHack,\\n\\t\\t\\t\\t\\tstartWeak1,\\n\\t\\t\\t\\t\\tstartGrow,\\n\\t\\t\\t\\t\\tstartWeak2\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\t\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\t\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\t\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\t\\t\\tns.exec(\\\"run-weaken.js\\\", \\\"home\\\", 1, target, 1, startWeak1);\\n\\t\\t\\t\\tns.exec(\\\"run-weaken.js\\\", \\\"home\\\", 1, target, 1, startWeak2);\\n\\t\\t\\t\\tns.exec(\\\"run-hack.js\\\", \\\"home\\\", 1, target, 1, startHack);\\n\\t\\t\\t\\tns.exec(\\\"run-grow.js\\\", \\\"home\\\", 1, target, 1, startGrow);\\n\\t\\t\\t\\tbatches++;\\n\\n\\t\\t\\t\\treturn 80 + maxTime;\\n\\t\\t\\t};\\n\\n\\t\\t\\tconst duration = runBatch(0);\\n\\t\\t\\tns.print(`  Batches: ${batches} | RAM: ${batches * 6.95} GB`);\\n\\n\\t\\t\\tawait ns.sleep(duration);\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tactive: false,\\n\\t\\tinfo: \\\"2 WWHG batches\\\",\\n\\t\\tthreads: 1,\\n\\t\\trunner: async (ns) => {\\n\\t\\t\\tconst timeWeaken = getTime(ns.getWeakenTime(target));\\n\\t\\t\\tconst timeGrow = getTime(ns.getGrowTime(target));\\n\\t\\t\\tconst timeHack = getTime(ns.getHackTime(target));\\n\\t\\t\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\t\\t\\tlet batches = 0;\\n\\n\\t\\t\\tconst runBatch = (delay) => {\\n\\t\\t\\t\\tlet startHack = maxTime - timeHack;\\n\\t\\t\\t\\tlet startWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\t\\t\\tlet startGrow = 40 + maxTime - timeGrow;\\n\\t\\t\\t\\tlet startWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\t\\t\\tconst minStart = Math.min(\\n\\t\\t\\t\\t\\tstartHack,\\n\\t\\t\\t\\t\\tstartWeak1,\\n\\t\\t\\t\\t\\tstartGrow,\\n\\t\\t\\t\\t\\tstartWeak2\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\t\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\t\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\t\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\t\\t\\tns.exec(\\\"run-weaken.js\\\", \\\"home\\\", 1, target, 1, startWeak1);\\n\\t\\t\\t\\tns.exec(\\\"run-weaken.js\\\", \\\"home\\\", 1, target, 1, startWeak2);\\n\\t\\t\\t\\tns.exec(\\\"run-hack.js\\\", \\\"home\\\", 1, target, 1, startHack);\\n\\t\\t\\t\\tns.exec(\\\"run-grow.js\\\", \\\"home\\\", 1, target, 1, startGrow);\\n\\t\\t\\t\\tbatches++;\\n\\n\\t\\t\\t\\treturn 80 + maxTime;\\n\\t\\t\\t};\\n\\n\\t\\t\\tconst duration = runBatch(0);\\n\\t\\t\\trunBatch(80);\\n\\t\\t\\tns.print(`  Batches: ${batches} | RAM: ${batches * 6.95} GB`);\\n\\n\\t\\t\\tawait ns.sleep(80 + duration);\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tactive: true,\\n\\t\\tinfo: \\\"Max WWHG batches (20ms delay)\\\",\\n\\t\\tthreads: 1,\\n\\t\\trunner: async (ns) => {\\n\\t\\t\\tconst timeWeaken = getTime(ns.getWeakenTime(target));\\n\\t\\t\\tconst timeGrow = getTime(ns.getGrowTime(target));\\n\\t\\t\\tconst timeHack = getTime(ns.getHackTime(target));\\n\\t\\t\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\t\\t\\tlet batches = 0;\\n\\n\\t\\t\\tconst runBatch = (delay) => {\\n\\t\\t\\t\\tlet startHack = maxTime - timeHack;\\n\\t\\t\\t\\tlet startWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\t\\t\\tlet startGrow = 40 + maxTime - timeGrow;\\n\\t\\t\\t\\tlet startWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\t\\t\\tconst minStart = Math.min(\\n\\t\\t\\t\\t\\tstartHack,\\n\\t\\t\\t\\t\\tstartWeak1,\\n\\t\\t\\t\\t\\tstartGrow,\\n\\t\\t\\t\\t\\tstartWeak2\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\t\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\t\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\t\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\t\\t\\tns.exec(\\\"run-weaken.js\\\", \\\"home\\\", 1, target, 1, startWeak1);\\n\\t\\t\\t\\tns.exec(\\\"run-weaken.js\\\", \\\"home\\\", 1, target, 1, startWeak2);\\n\\t\\t\\t\\tns.exec(\\\"run-hack.js\\\", \\\"home\\\", 1, target, 1, startHack);\\n\\t\\t\\t\\tns.exec(\\\"run-grow.js\\\", \\\"home\\\", 1, target, 1, startGrow);\\n\\t\\t\\t\\tbatches++;\\n\\n\\t\\t\\t\\treturn 80 + maxTime;\\n\\t\\t\\t};\\n\\n\\t\\t\\tlet delay = 0;\\n\\t\\t\\tlet duration = 0;\\n\\t\\t\\tdo {\\n\\t\\t\\t\\tduration = runBatch(delay);\\n\\t\\t\\t\\tdelay += 20;\\n\\t\\t\\t} while (delay < duration);\\n\\t\\t\\tns.print(\\n\\t\\t\\t\\t`  Batches: ${batches} | RAM: ${(batches * 6.95).toFixed(2)} GB`\\n\\t\\t\\t);\\n\\n\\t\\t\\tawait ns.sleep(20 + delay + duration);\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tactive: true,\\n\\t\\tinfo: \\\"Max WWHG batches (80ms delay)\\\",\\n\\t\\tthreads: 1,\\n\\t\\trunner: async (ns) => {\\n\\t\\t\\tconst timeWeaken = getTime(ns.getWeakenTime(target));\\n\\t\\t\\tconst timeGrow = getTime(ns.getGrowTime(target));\\n\\t\\t\\tconst timeHack = getTime(ns.getHackTime(target));\\n\\t\\t\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\t\\t\\tlet batches = 0;\\n\\n\\t\\t\\tconst runBatch = (delay) => {\\n\\t\\t\\t\\tlet startHack = maxTime - timeHack;\\n\\t\\t\\t\\tlet startWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\t\\t\\tlet startGrow = 40 + maxTime - timeGrow;\\n\\t\\t\\t\\tlet startWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\t\\t\\tconst minStart = Math.min(\\n\\t\\t\\t\\t\\tstartHack,\\n\\t\\t\\t\\t\\tstartWeak1,\\n\\t\\t\\t\\t\\tstartGrow,\\n\\t\\t\\t\\t\\tstartWeak2\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\t\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\t\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\t\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\t\\t\\tns.exec(\\\"run-weaken.js\\\", \\\"home\\\", 1, target, 1, startWeak1);\\n\\t\\t\\t\\tns.exec(\\\"run-weaken.js\\\", \\\"home\\\", 1, target, 1, startWeak2);\\n\\t\\t\\t\\tns.exec(\\\"run-hack.js\\\", \\\"home\\\", 1, target, 1, startHack);\\n\\t\\t\\t\\tns.exec(\\\"run-grow.js\\\", \\\"home\\\", 1, target, 1, startGrow);\\n\\t\\t\\t\\tbatches++;\\n\\n\\t\\t\\t\\treturn 80 + maxTime;\\n\\t\\t\\t};\\n\\n\\t\\t\\tlet delay = 0;\\n\\t\\t\\tlet duration = 0;\\n\\t\\t\\tdo {\\n\\t\\t\\t\\tduration = runBatch(delay);\\n\\t\\t\\t\\tdelay += 80;\\n\\t\\t\\t} while (delay < duration);\\n\\t\\t\\tns.print(\\n\\t\\t\\t\\t`  Batches: ${batches} | RAM: ${(batches * 6.95).toFixed(2)} GB`\\n\\t\\t\\t);\\n\\n\\t\\t\\tawait ns.sleep(20 + delay + duration);\\n\\t\\t},\\n\\t},\\n];\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tns.tprint(\\\"See details: tail test.js\\\");\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\tns.print(\\\"Starting tests in a moment, when the target server is ready...\\\");\\n\\tawait prepare(ns);\\n\\n\\tfor (const key in tests) {\\n\\t\\tconst test = tests[key];\\n\\t\\tif (!test.active) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\n\\t\\tconst port = ns.getPortHandle(1);\\n\\n\\t\\tns.print(`* Start test ${key} - target ${target}\\\\n  ${test.info}...`);\\n\\t\\tconst start = Date.now();\\n\\n\\t\\t// Run the test algorithm.\\n\\t\\tport.clear();\\n\\t\\tawait test.runner(ns);\\n\\t\\tlet profit = 0;\\n\\t\\twhile (!port.empty()) {\\n\\t\\t\\tprofit += parseFloat(port.read());\\n\\t\\t}\\n\\n\\t\\t// Dump the target server status after the test.\\n\\t\\tdump(ns);\\n\\n\\t\\t// Restore target server to max values.\\n\\t\\tawait prepare(ns);\\n\\n\\t\\tconst duration = (getTime(Date.now() - start) / 1000).toFixed(1);\\n\\n\\t\\tconst lines = [];\\n\\t\\tlines.push(`> Profit: ${formatMoney(ns, profit)}`);\\n\\t\\tlines.push(`Duration: ${duration} sec`);\\n\\t\\tlines.push(\\n\\t\\t\\t`$/thread/sec: ${parseInt(profit / duration / test.threads)}`\\n\\t\\t);\\n\\n\\t\\tns.print(`${lines.join(\\\" | \\\")}\\\\n`);\\n\\t\\tawait ns.sleep(500);\\n\\t}\\n\\n\\tns.print(`--- all done ---`);\\n}\\n\\nasync function prepare(ns) {\\n\\tlet preparing = true;\\n\\n\\twhile (preparing) {\\n\\t\\tconst server = ns.getServer(target);\\n\\t\\tconst minSecurity = server.minDifficulty;\\n\\t\\tconst curSecurity = server.hackDifficulty;\\n\\t\\tconst maxMoney = server.moneyMax;\\n\\t\\tconst curMoney = server.moneyAvailable;\\n\\t\\tconst timeWeak = ns.getWeakenTime(target);\\n\\t\\tconst timeGrow = ns.getGrowTime(target);\\n\\t\\tconst timeDiff = 50; //Math.ceil(Math.abs(timeWeak - timeGrow));\\n\\n\\t\\tif (curSecurity > minSecurity) {\\n\\t\\t\\tns.exec(\\\"run-grow.js\\\", \\\"home\\\", 20, target);\\n\\t\\t\\tns.exec(\\\"run-weaken.js\\\", \\\"home\\\", 80, target, 80, timeDiff + 100);\\n\\t\\t} else if (curMoney < maxMoney) {\\n\\t\\t\\tns.exec(\\\"run-grow.js\\\", \\\"home\\\", 80, target);\\n\\t\\t\\tns.exec(\\\"run-weaken.js\\\", \\\"home\\\", 20, target, 20, timeDiff + 100);\\n\\t\\t} else {\\n\\t\\t\\tdumpSpace(ns);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst sleep = Math.ceil(Math.max(timeGrow, timeWeak)) + timeDiff;\\n\\t\\tawait ns.sleep(sleep + 150);\\n\\t}\\n}\\n\\nfunction dumpSpace(ns) {\\n\\tns.print(\\\"\\\");\\n}\\n\\nfunction dump(ns, ...args) {\\n\\tconst time = new Date().toISOString().substring(11, 19);\\n\\tconst server = ns.getServer(target);\\n\\tconst details = [];\\n\\n\\tdetails.push(`  > ${time}`);\\n\\tdetails.push(formatMoney(ns, server.moneyAvailable));\\n\\tdetails.push(formatMoney(ns, server.moneyMax - server.moneyAvailable));\\n\\tdetails.push(server.hackDifficulty);\\n\\tdetails.push(...args);\\n\\n\\tns.print(details.join(\\\" | \\\"));\\n}\\n\\nfunction getTime(value) {\\n\\treturn Math.ceil(value / 25) * 25;\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///982158b4-b4d3-467d-83e7-48f8584f6c4c\"},{\"filename\":\"test.js\",\"url\":\"blob:file:///47a85876-747c-464c-9d21-ae2f16e14b38\"}],\"ramUsage\":5.15,\"server\":\"home\",\"_hash\":\"88d9f9ab0f9ad3b0b71b43d92fe39d8bdde821a8d7b2b5ae936f2075fe74acaa\",\"moduleSequenceNumber\":275,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5be6e2ba-fabc-4887-9216-56d412aa447f\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///c19a389f-f388-4485-98bb-0f329eff7e27\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5be6e2ba-fabc-4887-9216-56d412aa447f\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///c19a389f-f388-4485-98bb-0f329eff7e27\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5be6e2ba-fabc-4887-9216-56d412aa447f\"},{\"filename\":\"/lib/server.js\",\"url\":\"blob:file:///b07b98ac-5df2-4333-9671-3f093f54d9b5\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5be6e2ba-fabc-4887-9216-56d412aa447f\"},{\"filename\":\"attk.js\",\"url\":\"blob:file:///7c8db61c-2700-45b4-925a-91ba589aaf0b\"}],\"ramUsage\":17.5,\"server\":\"home\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Server from \\\"lib/server.js\\\";\\n\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tconst host = ns.args[0];\\n\\n\\tif (args.help || !host) {\\n\\t\\tns.tprint(\\\"This script does a more detailed analysis of a server.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tawait Server.initialize(ns);\\n\\tconst server = Server.get(host);\\n\\tns.tprint(`\\\\n${server.analyze(ns)}\\\\n`);\\n}\",\"filename\":\"/tools/analyze-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///b1e24d07-616c-41e4-8096-3977eeaa26ad\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///b0eeeafd-f075-4c6d-aa68-28793b9f00b2\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///377e8590-1a39-43c4-b8d4-41020c72ec6c\"},{\"filename\":\"/lib/server.js\",\"url\":\"blob:file:///63585cc6-140c-4860-91a0-37c7557a3b38\"},{\"filename\":\"/tools/analyze-server.js\",\"url\":\"blob:file:///8a8d0bc2-72c7-4bf6-8d62-fcbcb23a8023\"}],\"ramUsage\":17.5,\"server\":\"home\",\"_hash\":\"4b8dfd04012d7f548fd50e1ee4e2ce59b1e12c806a16f39fb504204d66d6a51b\",\"moduleSequenceNumber\":277,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Server from \\\"lib/server.js\\\";\\n\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\tlet host = args._[0];\\n\\n\\tif (!host || args.help) {\\n\\t\\tns.tprint(\\n\\t\\t\\t\\\"This script helps you find a server on the network and shows you the path to get to it.\\\"\\n\\t\\t);\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} SERVER`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} n00dles`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst lines = [\\\"\\\", `Locating ${host} ...`];\\n\\tawait Server.initialize(ns);\\n\\tconst server = Server.get(host);\\n\\n\\tfor (const i in server.route) {\\n\\t\\tconst extra = i > 0 ? \\\"└ \\\" : \\\"\\\";\\n\\t\\tlines.push(`  ${\\\"  \\\".repeat(i)}${extra}${server.route[i]}`);\\n\\t}\\n\\n\\tlines.push(\\\"\\\\nConnection command:\\\");\\n\\tlines.push(server.cmdConnect());\\n\\n\\tns.tprint(`${lines.join(\\\"\\\\n\\\")}\\\\n\\\\n`);\\n}\\n\\nexport function autocomplete(data, args) {\\n\\treturn data.servers;\\n}\",\"filename\":\"/tools/find-server.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5d48ac40-10fe-44be-853a-a07a2ff37ce9\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///8fa9e23f-2069-4c66-bc1e-fd5e4591dee6\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5d48ac40-10fe-44be-853a-a07a2ff37ce9\"},{\"filename\":\"/lib/server.js\",\"url\":\"blob:file:///1a63a907-e28f-4b4c-843a-b7b102888ca8\"},{\"filename\":\"/tools/find-server.js\",\"url\":\"blob:file:///496df56b-e684-40f1-9fe2-3a93de6fd91e\"}],\"ramUsage\":17.5,\"server\":\"home\",\"_hash\":\"ed46fa6361ece1adb6a74481c10f58dc7263c41998f37f392795159c228b83f5\",\"moduleSequenceNumber\":278,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\n\\nfunction convert2DArrayToString(arr) {\\n\\tvar components = [];\\n\\tarr.forEach(function (e) {\\n\\t\\tvar s = e.toString();\\n\\t\\ts = [\\\"[\\\", s, \\\"]\\\"].join(\\\"\\\");\\n\\t\\tcomponents.push(s);\\n\\t});\\n\\treturn components.join(\\\",\\\").replace(/\\\\s/g, \\\"\\\");\\n}\\n\\nconst codingContractTypesMetadata = [\\n\\t{\\n\\t\\tname: \\\"Find Largest Prime Factor\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar fac = 2;\\n\\t\\t\\tvar n = data;\\n\\t\\t\\twhile (n > (fac - 1) * (fac - 1)) {\\n\\t\\t\\t\\twhile (n % fac === 0) {\\n\\t\\t\\t\\t\\tn = Math.round(n / fac);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t++fac;\\n\\t\\t\\t}\\n\\t\\t\\treturn n === 1 ? fac - 1 : n;\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Subarray with Maximum Sum\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar nums = data.slice();\\n\\t\\t\\tfor (var i = 1; i < nums.length; i++) {\\n\\t\\t\\t\\tnums[i] = Math.max(nums[i], nums[i] + nums[i - 1]);\\n\\t\\t\\t}\\n\\t\\t\\treturn Math.max.apply(Math, nums);\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Total Ways to Sum\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar ways = [1];\\n\\t\\t\\tways.length = data + 1;\\n\\t\\t\\tways.fill(0, 1);\\n\\t\\t\\tfor (var i = 1; i < data; ++i) {\\n\\t\\t\\t\\tfor (var j = i; j <= data; ++j) {\\n\\t\\t\\t\\t\\tways[j] += ways[j - i];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn ways[data];\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Spiralize Matrix\\\",\\n\\t\\tsolver: function (data, ans) {\\n\\t\\t\\tvar spiral = [];\\n\\t\\t\\tvar m = data.length;\\n\\t\\t\\tvar n = data[0].length;\\n\\t\\t\\tvar u = 0;\\n\\t\\t\\tvar d = m - 1;\\n\\t\\t\\tvar l = 0;\\n\\t\\t\\tvar r = n - 1;\\n\\t\\t\\tvar k = 0;\\n\\t\\t\\twhile (true) {\\n\\t\\t\\t\\t// Up\\n\\t\\t\\t\\tfor (var col = l; col <= r; col++) {\\n\\t\\t\\t\\t\\tspiral[k] = data[u][col];\\n\\t\\t\\t\\t\\t++k;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (++u > d) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Right\\n\\t\\t\\t\\tfor (var row = u; row <= d; row++) {\\n\\t\\t\\t\\t\\tspiral[k] = data[row][r];\\n\\t\\t\\t\\t\\t++k;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (--r < l) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Down\\n\\t\\t\\t\\tfor (var col = r; col >= l; col--) {\\n\\t\\t\\t\\t\\tspiral[k] = data[d][col];\\n\\t\\t\\t\\t\\t++k;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (--d < u) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Left\\n\\t\\t\\t\\tfor (var row = d; row >= u; row--) {\\n\\t\\t\\t\\t\\tspiral[k] = data[row][l];\\n\\t\\t\\t\\t\\t++k;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (++l > r) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn spiral;\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Array Jumping Game\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar n = data.length;\\n\\t\\t\\tvar i = 0;\\n\\t\\t\\tfor (var reach = 0; i < n && i <= reach; ++i) {\\n\\t\\t\\t\\treach = Math.max(i + data[i], reach);\\n\\t\\t\\t}\\n\\t\\t\\tvar solution = i === n;\\n\\t\\t\\treturn solution ? 1 : 0;\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Merge Overlapping Intervals\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar intervals = data.slice();\\n\\t\\t\\tintervals.sort(function (a, b) {\\n\\t\\t\\t\\treturn a[0] - b[0];\\n\\t\\t\\t});\\n\\t\\t\\tvar result = [];\\n\\t\\t\\tvar start = intervals[0][0];\\n\\t\\t\\tvar end = intervals[0][1];\\n\\t\\t\\tfor (\\n\\t\\t\\t\\tvar _i = 0, intervals_1 = intervals;\\n\\t\\t\\t\\t_i < intervals_1.length;\\n\\t\\t\\t\\t_i++\\n\\t\\t\\t) {\\n\\t\\t\\t\\tvar interval = intervals_1[_i];\\n\\t\\t\\t\\tif (interval[0] <= end) {\\n\\t\\t\\t\\t\\tend = Math.max(end, interval[1]);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tresult.push([start, end]);\\n\\t\\t\\t\\t\\tstart = interval[0];\\n\\t\\t\\t\\t\\tend = interval[1];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tresult.push([start, end]);\\n\\t\\t\\tvar sanitizedResult = convert2DArrayToString(result);\\n\\t\\t\\treturn sanitizedResult;\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Generate IP Addresses\\\",\\n\\t\\tsolver: function (data, ans) {\\n\\t\\t\\tvar ret = [];\\n\\t\\t\\tfor (var a = 1; a <= 3; ++a) {\\n\\t\\t\\t\\tfor (var b = 1; b <= 3; ++b) {\\n\\t\\t\\t\\t\\tfor (var c = 1; c <= 3; ++c) {\\n\\t\\t\\t\\t\\t\\tfor (var d = 1; d <= 3; ++d) {\\n\\t\\t\\t\\t\\t\\t\\tif (a + b + c + d === data.length) {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar A = parseInt(data.substring(0, a), 10);\\n\\t\\t\\t\\t\\t\\t\\t\\tvar B = parseInt(data.substring(a, a + b), 10);\\n\\t\\t\\t\\t\\t\\t\\t\\tvar C = parseInt(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata.substring(a + b, a + b + c),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t10\\n\\t\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\t\\t\\tvar D = parseInt(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata.substring(a + b + c, a + b + c + d),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t10\\n\\t\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tA <= 255 &&\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tB <= 255 &&\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tC <= 255 &&\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tD <= 255\\n\\t\\t\\t\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvar ip = [\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tA.toString(),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\".\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tB.toString(),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\".\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tC.toString(),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\\".\\\",\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tD.toString(),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t].join(\\\"\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (ip.length === data.length + 3) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tret.push(ip);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn ret;\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Algorithmic Stock Trader I\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar maxCur = 0;\\n\\t\\t\\tvar maxSoFar = 0;\\n\\t\\t\\tfor (var i = 1; i < data.length; ++i) {\\n\\t\\t\\t\\tmaxCur = Math.max(0, (maxCur += data[i] - data[i - 1]));\\n\\t\\t\\t\\tmaxSoFar = Math.max(maxCur, maxSoFar);\\n\\t\\t\\t}\\n\\t\\t\\treturn maxSoFar.toString();\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Algorithmic Stock Trader II\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar profit = 0;\\n\\t\\t\\tfor (var p = 1; p < data.length; ++p) {\\n\\t\\t\\t\\tprofit += Math.max(data[p] - data[p - 1], 0);\\n\\t\\t\\t}\\n\\t\\t\\treturn profit.toString();\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Algorithmic Stock Trader III\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar hold1 = Number.MIN_SAFE_INTEGER;\\n\\t\\t\\tvar hold2 = Number.MIN_SAFE_INTEGER;\\n\\t\\t\\tvar release1 = 0;\\n\\t\\t\\tvar release2 = 0;\\n\\t\\t\\tfor (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\\n\\t\\t\\t\\tvar price = data_1[_i];\\n\\t\\t\\t\\trelease2 = Math.max(release2, hold2 + price);\\n\\t\\t\\t\\thold2 = Math.max(hold2, release1 - price);\\n\\t\\t\\t\\trelease1 = Math.max(release1, hold1 + price);\\n\\t\\t\\t\\thold1 = Math.max(hold1, price * -1);\\n\\t\\t\\t}\\n\\t\\t\\treturn release2.toString();\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Algorithmic Stock Trader IV\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar k = data[0];\\n\\t\\t\\tvar prices = data[1];\\n\\t\\t\\tvar len = prices.length;\\n\\t\\t\\tif (len < 2) {\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t\\tif (k > len / 2) {\\n\\t\\t\\t\\tvar res = 0;\\n\\t\\t\\t\\tfor (var i = 1; i < len; ++i) {\\n\\t\\t\\t\\t\\tres += Math.max(prices[i] - prices[i - 1], 0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn res;\\n\\t\\t\\t}\\n\\t\\t\\tvar hold = [];\\n\\t\\t\\tvar rele = [];\\n\\t\\t\\thold.length = k + 1;\\n\\t\\t\\trele.length = k + 1;\\n\\t\\t\\tfor (var i = 0; i <= k; ++i) {\\n\\t\\t\\t\\thold[i] = Number.MIN_SAFE_INTEGER;\\n\\t\\t\\t\\trele[i] = 0;\\n\\t\\t\\t}\\n\\t\\t\\tvar cur;\\n\\t\\t\\tfor (var i = 0; i < len; ++i) {\\n\\t\\t\\t\\tcur = prices[i];\\n\\t\\t\\t\\tfor (var j = k; j > 0; --j) {\\n\\t\\t\\t\\t\\trele[j] = Math.max(rele[j], hold[j] + cur);\\n\\t\\t\\t\\t\\thold[j] = Math.max(hold[j], rele[j - 1] - cur);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn rele[k];\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Minimum Path Sum in a Triangle\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar n = data.length;\\n\\t\\t\\tvar dp = data[n - 1].slice();\\n\\t\\t\\tfor (var i = n - 2; i > -1; --i) {\\n\\t\\t\\t\\tfor (var j = 0; j < data[i].length; ++j) {\\n\\t\\t\\t\\t\\tdp[j] = Math.min(dp[j], dp[j + 1]) + data[i][j];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn dp[0];\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Unique Paths in a Grid I\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar n = data[0]; // Number of rows\\n\\t\\t\\tvar m = data[1]; // Number of columns\\n\\t\\t\\tvar currentRow = [];\\n\\t\\t\\tcurrentRow.length = n;\\n\\t\\t\\tfor (var i = 0; i < n; i++) {\\n\\t\\t\\t\\tcurrentRow[i] = 1;\\n\\t\\t\\t}\\n\\t\\t\\tfor (var row = 1; row < m; row++) {\\n\\t\\t\\t\\tfor (var i = 1; i < n; i++) {\\n\\t\\t\\t\\t\\tcurrentRow[i] += currentRow[i - 1];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn currentRow[n - 1];\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Unique Paths in a Grid II\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar obstacleGrid = [];\\n\\t\\t\\tobstacleGrid.length = data.length;\\n\\t\\t\\tfor (var i = 0; i < obstacleGrid.length; ++i) {\\n\\t\\t\\t\\tobstacleGrid[i] = data[i].slice();\\n\\t\\t\\t}\\n\\t\\t\\tfor (var i = 0; i < obstacleGrid.length; i++) {\\n\\t\\t\\t\\tfor (var j = 0; j < obstacleGrid[0].length; j++) {\\n\\t\\t\\t\\t\\tif (obstacleGrid[i][j] == 1) {\\n\\t\\t\\t\\t\\t\\tobstacleGrid[i][j] = 0;\\n\\t\\t\\t\\t\\t} else if (i == 0 && j == 0) {\\n\\t\\t\\t\\t\\t\\tobstacleGrid[0][0] = 1;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tobstacleGrid[i][j] =\\n\\t\\t\\t\\t\\t\\t\\t(i > 0 ? obstacleGrid[i - 1][j] : 0) +\\n\\t\\t\\t\\t\\t\\t\\t(j > 0 ? obstacleGrid[i][j - 1] : 0);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn obstacleGrid[obstacleGrid.length - 1][\\n\\t\\t\\t\\tobstacleGrid[0].length - 1\\n\\t\\t\\t];\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Sanitize Parentheses in Expression\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar left = 0;\\n\\t\\t\\tvar right = 0;\\n\\t\\t\\tvar res = [];\\n\\t\\t\\tfor (var i = 0; i < data.length; ++i) {\\n\\t\\t\\t\\tif (data[i] === \\\"(\\\") {\\n\\t\\t\\t\\t\\t++left;\\n\\t\\t\\t\\t} else if (data[i] === \\\")\\\") {\\n\\t\\t\\t\\t\\tleft > 0 ? --left : ++right;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfunction dfs(pair, index, left, right, s, solution, res) {\\n\\t\\t\\t\\tif (s.length === index) {\\n\\t\\t\\t\\t\\tif (left === 0 && right === 0 && pair === 0) {\\n\\t\\t\\t\\t\\t\\tfor (var i = 0; i < res.length; i++) {\\n\\t\\t\\t\\t\\t\\t\\tif (res[i] === solution) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tres.push(solution);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (s[index] === \\\"(\\\") {\\n\\t\\t\\t\\t\\tif (left > 0) {\\n\\t\\t\\t\\t\\t\\tdfs(pair, index + 1, left - 1, right, s, solution, res);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdfs(\\n\\t\\t\\t\\t\\t\\tpair + 1,\\n\\t\\t\\t\\t\\t\\tindex + 1,\\n\\t\\t\\t\\t\\t\\tleft,\\n\\t\\t\\t\\t\\t\\tright,\\n\\t\\t\\t\\t\\t\\ts,\\n\\t\\t\\t\\t\\t\\tsolution + s[index],\\n\\t\\t\\t\\t\\t\\tres\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t} else if (s[index] === \\\")\\\") {\\n\\t\\t\\t\\t\\tif (right > 0)\\n\\t\\t\\t\\t\\t\\tdfs(pair, index + 1, left, right - 1, s, solution, res);\\n\\t\\t\\t\\t\\tif (pair > 0)\\n\\t\\t\\t\\t\\t\\tdfs(\\n\\t\\t\\t\\t\\t\\t\\tpair - 1,\\n\\t\\t\\t\\t\\t\\t\\tindex + 1,\\n\\t\\t\\t\\t\\t\\t\\tleft,\\n\\t\\t\\t\\t\\t\\t\\tright,\\n\\t\\t\\t\\t\\t\\t\\ts,\\n\\t\\t\\t\\t\\t\\t\\tsolution + s[index],\\n\\t\\t\\t\\t\\t\\t\\tres\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tdfs(\\n\\t\\t\\t\\t\\t\\tpair,\\n\\t\\t\\t\\t\\t\\tindex + 1,\\n\\t\\t\\t\\t\\t\\tleft,\\n\\t\\t\\t\\t\\t\\tright,\\n\\t\\t\\t\\t\\t\\ts,\\n\\t\\t\\t\\t\\t\\tsolution + s[index],\\n\\t\\t\\t\\t\\t\\tres\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tdfs(0, 0, left, right, data, \\\"\\\", res);\\n\\n\\t\\t\\treturn res;\\n\\t\\t},\\n\\t},\\n\\t{\\n\\t\\tname: \\\"Find All Valid Math Expressions\\\",\\n\\t\\tsolver: function (data) {\\n\\t\\t\\tvar num = data[0];\\n\\t\\t\\tvar target = data[1];\\n\\t\\t\\tfunction helper(res, path, num, target, pos, evaluated, multed) {\\n\\t\\t\\t\\tif (pos === num.length) {\\n\\t\\t\\t\\t\\tif (target === evaluated) {\\n\\t\\t\\t\\t\\t\\tres.push(path);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfor (var i = pos; i < num.length; ++i) {\\n\\t\\t\\t\\t\\tif (i != pos && num[pos] == \\\"0\\\") {\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tvar cur = parseInt(num.substring(pos, i + 1));\\n\\t\\t\\t\\t\\tif (pos === 0) {\\n\\t\\t\\t\\t\\t\\thelper(res, path + cur, num, target, i + 1, cur, cur);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\thelper(\\n\\t\\t\\t\\t\\t\\t\\tres,\\n\\t\\t\\t\\t\\t\\t\\tpath + \\\"+\\\" + cur,\\n\\t\\t\\t\\t\\t\\t\\tnum,\\n\\t\\t\\t\\t\\t\\t\\ttarget,\\n\\t\\t\\t\\t\\t\\t\\ti + 1,\\n\\t\\t\\t\\t\\t\\t\\tevaluated + cur,\\n\\t\\t\\t\\t\\t\\t\\tcur\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\thelper(\\n\\t\\t\\t\\t\\t\\t\\tres,\\n\\t\\t\\t\\t\\t\\t\\tpath + \\\"-\\\" + cur,\\n\\t\\t\\t\\t\\t\\t\\tnum,\\n\\t\\t\\t\\t\\t\\t\\ttarget,\\n\\t\\t\\t\\t\\t\\t\\ti + 1,\\n\\t\\t\\t\\t\\t\\t\\tevaluated - cur,\\n\\t\\t\\t\\t\\t\\t\\t-cur\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\thelper(\\n\\t\\t\\t\\t\\t\\t\\tres,\\n\\t\\t\\t\\t\\t\\t\\tpath + \\\"*\\\" + cur,\\n\\t\\t\\t\\t\\t\\t\\tnum,\\n\\t\\t\\t\\t\\t\\t\\ttarget,\\n\\t\\t\\t\\t\\t\\t\\ti + 1,\\n\\t\\t\\t\\t\\t\\t\\tevaluated - multed + multed * cur,\\n\\t\\t\\t\\t\\t\\t\\tmulted * cur\\n\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (num == null || num.length === 0) {\\n\\t\\t\\t\\treturn [];\\n\\t\\t\\t}\\n\\t\\t\\tvar result = [];\\n\\t\\t\\thelper(result, \\\"\\\", num, target, 0, 0, 0);\\n\\t\\t\\treturn result;\\n\\t\\t},\\n\\t},\\n];\\n\\nfunction findAnswer(contract) {\\n\\tlet answer;\\n\\n\\tconst codingContractSolution = codingContractTypesMetadata.find(\\n\\t\\t(codingContractTypeMetadata) =>\\n\\t\\t\\tcodingContractTypeMetadata.name === contract.type\\n\\t);\\n\\n\\tif (codingContractSolution) {\\n\\t\\tanswer = codingContractSolution.solver(contract.data);\\n\\t} else {\\n\\t\\tconsole.error(\\\"Unable to find answer for\\\", contract);\\n\\t}\\n\\n\\treturn answer;\\n}\\n\\nexport async function main(ns) {\\n\\tconst args = ns.flags([\\n\\t\\t[\\\"help\\\", false],\\n\\t\\t[\\\"solve\\\", false],\\n\\t]);\\n\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script helps you find and solve coding contracts.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()} [--solve]`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(`> run ${ns.getScriptName()} --solve`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst contractsDb = [];\\n\\tlet pathSize = 0;\\n\\n\\tawait Server.initialize(ns);\\n\\n\\tawait Server.all((server) => {\\n\\t\\tns.ls(server.hostname)\\n\\t\\t\\t.filter((file) => file.endsWith(\\\".cct\\\"))\\n\\t\\t\\t.forEach((file) => {\\n\\t\\t\\t\\tconst contract = {\\n\\t\\t\\t\\t\\tfile,\\n\\t\\t\\t\\t\\thostname: server.hostname,\\n\\t\\t\\t\\t\\tpath: `${server.hostname}/${file}`,\\n\\t\\t\\t\\t\\ttype: ns.codingcontract.getContractType(\\n\\t\\t\\t\\t\\t\\tfile,\\n\\t\\t\\t\\t\\t\\tserver.hostname\\n\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\tdata: ns.codingcontract.getData(file, server.hostname),\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\tif (pathSize < contract.path.length) {\\n\\t\\t\\t\\t\\tpathSize = contract.path.length;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tcontractsDb.push(contract);\\n\\t\\t\\t});\\n\\t});\\n\\n\\tif (!contractsDb.length) {\\n\\t\\tCommon.say(ns, \\\"No contracts found.\\\");\\n\\t\\treturn ns.exit();\\n\\t}\\n\\n\\tconst lines = [\\n\\t\\t`Found ${contractsDb.length} contract${\\n\\t\\t\\t1 === contractsDb.length ? \\\"\\\" : \\\"s\\\"\\n\\t\\t}:`,\\n\\t];\\n\\n\\tcontractsDb.forEach((contract) => {\\n\\t\\tlines.push(\\n\\t\\t\\t` - ${contract.path} ${\\\" \\\".repeat(\\n\\t\\t\\t\\tpathSize - contract.path.length\\n\\t\\t\\t)} [${contract.type}]`\\n\\t\\t);\\n\\n\\t\\tif (args.solve) {\\n\\t\\t\\tconst answer = findAnswer(contract);\\n\\n\\t\\t\\tif (answer !== null) {\\n\\t\\t\\t\\tconst solvingResult = ns.codingcontract.attempt(\\n\\t\\t\\t\\t\\tanswer,\\n\\t\\t\\t\\t\\tcontract.file,\\n\\t\\t\\t\\t\\tcontract.hostname,\\n\\t\\t\\t\\t\\t{ returnReward: true }\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tif (solvingResult) {\\n\\t\\t\\t\\t\\tlines.push(`    -> Solved: ${solvingResult}`);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tlines.push(`    -> Failed.`);\\n\\t\\t\\t\\t\\tconsole.log(\\\"Failed contract:\\\", contract, answer);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlines.push(`    -> Unable to solve`);\\n\\t\\t\\t\\tconsole.log(\\\"Unable to solve contract:\\\", contract);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\n\\tCommon.say(ns, lines.join(\\\"\\\\n\\\"));\\n}\",\"filename\":\"/tools/contract.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5d48ac40-10fe-44be-853a-a07a2ff37ce9\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///8fa9e23f-2069-4c66-bc1e-fd5e4591dee6\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5d48ac40-10fe-44be-853a-a07a2ff37ce9\"},{\"filename\":\"/lib/server.js\",\"url\":\"blob:file:///1a63a907-e28f-4b4c-843a-b7b102888ca8\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5d48ac40-10fe-44be-853a-a07a2ff37ce9\"},{\"filename\":\"/tools/contract.js\",\"url\":\"blob:file:///209a9f7a-e5ee-4455-a0dc-ced98a00dd2b\"}],\"ramUsage\":37.7,\"server\":\"home\",\"_hash\":\"3c4e2f4a0ddcbf2cdb6f089688a3ddb118252f4492b0b1bbfa9d5897373a76e7\",\"moduleSequenceNumber\":279,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Server from \\\"lib/server.js\\\";\\n\\nexport async function main(ns) {\\n\\tconst args = ns.flags([[\\\"help\\\", false]]);\\n\\n\\tif (args.help) {\\n\\t\\tns.tprint(\\\"This script displays all known servers you have access to.\\\");\\n\\t\\tns.tprint(`Usage: run ${ns.getScriptName()}`);\\n\\t\\tns.tprint(\\\"Example:\\\");\\n\\t\\tns.tprint(`> run ${ns.getScriptName()}`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst addChildren = (parent, output, level) => {\\n\\t\\tconst server = Server.get(parent);\\n\\t\\tconst prefix = \\\"  \\\".repeat(level);\\n\\t\\tconst infos = [];\\n\\n\\t\\tif (server.purchasedByPlayer) {\\n\\t\\t\\tinfos.push(`${server.ramTotalMax} GB`);\\n\\t\\t\\tinfos.push(\\n\\t\\t\\t\\t`${server.cpuCores} core${server.cpuCores > 1 ? \\\"s\\\" : \\\"\\\"}`\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tif (server.hasAdminRights) {\\n\\t\\t\\t\\tinfos.push(`${server.backdoorInstalled ? \\\"◼︎\\\" : \\\"◻︎\\\"} HACKED`);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tinfos.push(`lvl ${server.requiredHackingSkill}`);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (server.organizationName) {\\n\\t\\t\\tinfos.push(server.organizationName);\\n\\t\\t}\\n\\n\\t\\toutput.push(`${prefix} > ${parent}  -  ${infos.join(\\\" | \\\")}`);\\n\\n\\t\\tfor (const i in server.children) {\\n\\t\\t\\tconst child = server.children[i];\\n\\n\\t\\t\\tif (child) {\\n\\t\\t\\t\\taddChildren(child, output, level + 1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\n\\tawait Server.initialize(ns);\\n\\tconst lines = [];\\n\\n\\taddChildren(\\\"home\\\", lines, 0);\\n\\n\\tns.tprint(`\\\\n\\\\n${lines.join(\\\"\\\\n\\\")}\\\\n\\\\n`);\\n}\",\"filename\":\"/tools/scan-all.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5d48ac40-10fe-44be-853a-a07a2ff37ce9\"},{\"filename\":\"/lib/player.js\",\"url\":\"blob:file:///8fa9e23f-2069-4c66-bc1e-fd5e4591dee6\"},{\"filename\":\"/lib/common.js\",\"url\":\"blob:file:///5d48ac40-10fe-44be-853a-a07a2ff37ce9\"},{\"filename\":\"/lib/server.js\",\"url\":\"blob:file:///1a63a907-e28f-4b4c-843a-b7b102888ca8\"},{\"filename\":\"/tools/scan-all.js\",\"url\":\"blob:file:///946e15e2-6703-44da-abc5-430db8c11ab2\"}],\"ramUsage\":17.5,\"server\":\"home\",\"_hash\":\"dbd923a19a38422a75f1f83b6fe4ab6646857fd5c0578d14af61971b887b536b\",\"moduleSequenceNumber\":280,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.get\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyze\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"data.config.txt\",\"text\":\"{\\\"started\\\":true,\\\"target\\\":\\\"the-hub\\\",\\\"autoTarget\\\":true,\\\"hackAlgo\\\":\\\"hwgw\\\",\\\"boundSec\\\":1,\\\"boundMoney\\\":0.95,\\\"lockedBudget\\\":0,\\\"lockedRam\\\":200}\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"2.0.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":67787683783,\"moneyMax\":1694692094575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1280,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"2.3.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55513836363,\"moneyMax\":1387845909075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1344,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"67.7.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":20255676411,\"moneyMax\":506391910275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1132,\"serverGrowth\":69}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"51.2.4.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":28425670244,\"moneyMax\":710641756100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1183,\"serverGrowth\":72}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"57.8.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":30001226926,\"moneyMax\":750030673150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1056,\"serverGrowth\":67}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"1.6.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":15895494709,\"moneyMax\":397387367725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1164,\"serverGrowth\":74}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"1.1.3.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":15475477797,\"moneyMax\":386886944925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":934,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"35.6.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":17397664860,\"moneyMax\":434941621500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1010,\"serverGrowth\":76}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"44.2.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":23579331436,\"moneyMax\":589483285900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1298,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"54.8.6.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":1447145343,\"moneyMax\":36178633575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1086,\"serverGrowth\":91}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"72.1.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1129,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"49.1.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1142627216,\"moneyMax\":28565680400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1004,\"serverGrowth\":92}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"29.2.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":818934580,\"moneyMax\":20473364500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":856,\"serverGrowth\":71}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"37.9.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":806657145,\"moneyMax\":20166428625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":914,\"serverGrowth\":68}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"78.8.3.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":633568908,\"moneyMax\":15839222700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":881,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"65.0.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":702275487,\"moneyMax\":17556887175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":883,\"serverGrowth\":79}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"66.2.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":986570331,\"moneyMax\":24664258275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":881,\"serverGrowth\":87}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"48.2.4.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1137247197,\"moneyMax\":28431179925,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-189560.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0],[0,1,0,1,0,1,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"54.1.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":798106112,\"moneyMax\":19952652800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":833,\"serverGrowth\":64}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"74.1.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":655525867,\"moneyMax\":16388146675,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":833,\"serverGrowth\":71}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"3.4.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":874252769,\"moneyMax\":21856319225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":919,\"serverGrowth\":77}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"22.3.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":838827015,\"moneyMax\":20970675375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":76}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"15.5.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1043262538,\"moneyMax\":26081563450,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":857,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"36.7.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":965288826,\"moneyMax\":24132220650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":889,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"67.0.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":1025677666,\"moneyMax\":25641941650,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":781,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"15.5.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":843803599,\"moneyMax\":21095089975,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":71}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"76.4.6.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":784906613,\"moneyMax\":19622665325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":72}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"0.1.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1302120470,\"moneyMax\":32553011750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":847,\"serverGrowth\":66}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"7.6.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1557672368,\"moneyMax\":38941809200,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":843,\"serverGrowth\":88}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"72.8.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":1249760426,\"moneyMax\":31244010650,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":787,\"serverGrowth\":85}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"57.0.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1451614803,\"moneyMax\":36290370075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"62.5.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1043441828,\"moneyMax\":26086045700,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"71.2.1.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":788098887,\"moneyMax\":19702472175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":656,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"57.0.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":664884595,\"moneyMax\":16622114875,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":487,\"serverGrowth\":46}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"65.6.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":744187558,\"moneyMax\":18604688950,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":532,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"91.4.7.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",36,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":36,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":36,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"aevum-police\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":281}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"aevum-police\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":282}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":283,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":285,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":381123069,\"moneyMax\":9528076725,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":417,\"serverGrowth\":48}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"36.8.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":34,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":18,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"rothman-uni\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":286}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"rothman-uni\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":287}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":288,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":290,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":176948123,\"moneyMax\":4423703075,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":390,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"10.9.4.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":800587727,\"moneyMax\":20014693175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":749,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"67.9.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":254793446,\"moneyMax\":6369836150,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":440,\"serverGrowth\":49}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"40.5.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":562607485,\"moneyMax\":14065187125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":648,\"serverGrowth\":66}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"41.5.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":544143845,\"moneyMax\":13603596125,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":431,\"serverGrowth\":25}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"73.8.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":42,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":18,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"the-hub\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":291}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"the-hub\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":292}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"the-hub\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":293,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":295,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":39,\"hackDifficulty\":15.507999999999994,\"minDifficulty\":13,\"moneyAvailable\":4007787950,\"moneyMax\":4007787950,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":302,\"serverGrowth\":49}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"81.5.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"comptek\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":296}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"comptek\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":297}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":298,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":299,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":300,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":233086238,\"moneyMax\":5827155950,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":373,\"serverGrowth\":64}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"86.4.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",36,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":33,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":36,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"netlink\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":301}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"netlink\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":302}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":303,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":305,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":408,\"serverGrowth\":59}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"34.8.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"johnson-ortho\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":306}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"johnson-ortho\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":307}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":308,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":310,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":70913833,\"moneyMax\":1772845825,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":281,\"serverGrowth\":44}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-248003.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[5,3,9,-4,-1,3,5,8],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"89.8.0.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",2,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":30,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tselectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nfunction selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif ('hwgw' === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"n00dles\",\"_hash\":\"bf40a6c5ebbb39cec7df8d44753ad37a4cc95286b97fa10c84d69399591de0a1\",\"moduleSequenceNumber\":311}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"n00dles\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":312}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"n00dles\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":313,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":315,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"98.9.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":38,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tselectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nfunction selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif ('hwgw' === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"foodnstuff\",\"_hash\":\"bf40a6c5ebbb39cec7df8d44753ad37a4cc95286b97fa10c84d69399591de0a1\",\"moduleSequenceNumber\":316}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"foodnstuff\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":317}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.8219999999999974,\"minDifficulty\":3,\"moneyAvailable\":12576341.653367152,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"43.3.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":39,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tselectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nfunction selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif ('hwgw' === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"sigma-cosmetics\",\"_hash\":\"bf40a6c5ebbb39cec7df8d44753ad37a4cc95286b97fa10c84d69399591de0a1\",\"moduleSequenceNumber\":321}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"sigma-cosmetics\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":322}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":325,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":4.623999999999997,\"minDifficulty\":3,\"moneyAvailable\":4862233.217264666,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"96.5.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":43,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tselectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nfunction selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif ('hwgw' === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"joesguns\",\"_hash\":\"bf40a6c5ebbb39cec7df8d44753ad37a4cc95286b97fa10c84d69399591de0a1\",\"moduleSequenceNumber\":326}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"joesguns\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":327}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.881999999999999,\"minDifficulty\":5,\"moneyAvailable\":4367975.849763216,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"18.9.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":47,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tselectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nfunction selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif ('hwgw' === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"zer0\",\"_hash\":\"bf40a6c5ebbb39cec7df8d44753ad37a4cc95286b97fa10c84d69399591de0a1\",\"moduleSequenceNumber\":331}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"zer0\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":332}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"3.4.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":50,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tselectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nfunction selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif ('hwgw' === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"nectar-net\",\"_hash\":\"bf40a6c5ebbb39cec7df8d44753ad37a4cc95286b97fa10c84d69399591de0a1\",\"moduleSequenceNumber\":336}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"nectar-net\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"94.5.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":48,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tselectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nfunction selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif ('hwgw' === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"neo-net\",\"_hash\":\"bf40a6c5ebbb39cec7df8d44753ad37a4cc95286b97fa10c84d69399591de0a1\",\"moduleSequenceNumber\":341}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"neo-net\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":342}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"23.9.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",36,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":32,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"silver-helix\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":346}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"silver-helix\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":347}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"max-hardware\",\"comptek\",\"netlink\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"55.1.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":44,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tselectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nfunction selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif ('hwgw' === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"hong-fang-tea\",\"_hash\":\"bf40a6c5ebbb39cec7df8d44753ad37a4cc95286b97fa10c84d69399591de0a1\",\"moduleSequenceNumber\":351}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"hong-fang-tea\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":352}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"8.8.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":45,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tselectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nfunction selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif ('hwgw' === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"harakiri-sushi\",\"_hash\":\"bf40a6c5ebbb39cec7df8d44753ad37a4cc95286b97fa10c84d69399591de0a1\",\"moduleSequenceNumber\":356}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"harakiri-sushi\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":357}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"82.5.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":41,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"phantasy\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"phantasy\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":362}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":84698924.62045035,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"72.7.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":31,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tselectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nfunction selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif ('hwgw' === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"max-hardware\",\"_hash\":\"bf40a6c5ebbb39cec7df8d44753ad37a4cc95286b97fa10c84d69399591de0a1\",\"moduleSequenceNumber\":366}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"max-hardware\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":367}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"99.4.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":49,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"omega-net\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":371}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"omega-net\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":372}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"omega-net\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":9,\"minDifficulty\":9,\"moneyAvailable\":1620690600,\"moneyMax\":1620690600,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":216,\"serverGrowth\":40}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"96.4.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"crush-fitness\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":376}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"crush-fitness\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":377}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":45608761,\"moneyMax\":1140219025,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":225,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"50.6.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":46,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tselectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nfunction selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif ('hwgw' === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"iron-gym\",\"_hash\":\"bf40a6c5ebbb39cec7df8d44753ad37a4cc95286b97fa10c84d69399591de0a1\",\"moduleSequenceNumber\":381}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"iron-gym\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":382}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":10.896000000000006,\"minDifficulty\":10,\"moneyAvailable\":23505549.187595576,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"5.9.7.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":516,\"serverGrowth\":37}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"34.1.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1061,\"serverGrowth\":52}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-125015.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":808909188,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"67.0.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":795,\"serverGrowth\":52}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"31.1.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":541,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"15.8.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",73,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":35,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":73,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"I.I.I.I\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":386}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"I.I.I.I\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":387}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":364,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"75.6.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":37,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":18,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"avmnite-02h\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":391}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"avmnite-02h\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":392}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":209,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"17.6.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":543,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"15.6.7.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",4,85486,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":189.60999999999777,\"pid\":40,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///963918b8-501e-48c3-84af-b7866510d5ea\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tselectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nfunction selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif ('hwgw' === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"CSEC\",\"_hash\":\"bf40a6c5ebbb39cec7df8d44753ad37a4cc95286b97fa10c84d69399591de0a1\",\"moduleSequenceNumber\":396}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 4 + currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"CSEC\",\"_hash\":\"0eb79c15237298ca038e69dc9b12fb199e4a065dd4196a92abbd28a31d49049b\",\"moduleSequenceNumber\":397}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-hack.js\",\"url\":\"blob:file:///332d362a-9f7f-41f0-8807-2ad91f6a7b7d\"}],\"ramUsage\":1.7,\"server\":\"CSEC\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///e1347f65-5c22-4439-ac00-f59789a7b9db\"}],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":57,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"48.0.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"48.5.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"54.2.2.4\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"darkweb\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":401}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"darkweb\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":402}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"59.0.2.4\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16383.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9362,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.105999999999995,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":3,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"threads\":9362,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-16\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":406}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-16\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":407}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-16\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-16\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"11.0.4.3\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16383.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9362,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.108,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":4,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"threads\":9362,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-17\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":411}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-17\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":412}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-17\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-17\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"36.0.5.6\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16383.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9362,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.11,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":5,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"threads\":9362,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-18\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":416}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-18\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":417}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-18\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-18\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"44.8.7.6\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16383.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9362,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.111999999999995,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":6,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"threads\":9362,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-19\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":421}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-19\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":422}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-19\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-19\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"83.1.7.6\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16383.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9362,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.114,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":7,\"ramUsage\":1.75,\"server\":\"pserv-20\",\"threads\":9362,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-20\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":426}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-20\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":427}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-20\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-20\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"55.7.1.2\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16383.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9362,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.114999999999995,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":8,\"ramUsage\":1.75,\"server\":\"pserv-21\",\"threads\":9362,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-21\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":431}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-21\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":432}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-21\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-21\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"97.4.3.3\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16383.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9362,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.117,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":9,\"ramUsage\":1.75,\"server\":\"pserv-22\",\"threads\":9362,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-22\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":436}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-22\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":437}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-22\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-22\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"86.9.6.4\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16383.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9362,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.119,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":10,\"ramUsage\":1.75,\"server\":\"pserv-23\",\"threads\":9362,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-23\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":441}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-23\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":442}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-23\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-23\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"88.6.1.4\",\"isConnectedTo\":false,\"maxRam\":16384,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":16383.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9362,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.120999999999995,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":11,\"ramUsage\":1.75,\"server\":\"pserv-24\",\"threads\":9362,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-24\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":446}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-24\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":447}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-24\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-24\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-24\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"89.0.9.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.123,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":12,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-0\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":451}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-0\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":452}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-0\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-0\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"47.6.2.5\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.125,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":13,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-1\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":456}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-1\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":457}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-1\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-1\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"56.8.6.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.128,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":14,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-2\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":461}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-2\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":462}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-2\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-2\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"71.9.9.1\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9159,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.129,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":15,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":9159,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9565,1,\"weaken-1\"],\"dataMap\":{},\"filename\":\"run-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.132,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":16,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"threads\":9565,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-3\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":466}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-3\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":467}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-3\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///3a5132a5-7bd6-41f2-b50a-0de61143ff87\"}],\"ramUsage\":1.75,\"server\":\"pserv-3\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"82.6.6.4\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,1,\"weaken-0\"],\"dataMap\":{},\"filename\":\"run-weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.134,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":17,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-4\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":471}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-4\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":472}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-4\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-weaken.js\",\"url\":\"blob:file:///3a5132a5-7bd6-41f2-b50a-0de61143ff87\"}],\"ramUsage\":1.75,\"server\":\"pserv-4\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"29.0.5.9\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.135,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":18,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-5\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":476}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-5\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":477}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-5\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-5\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"70.3.4.5\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.137,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":19,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-6\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":481}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-6\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":482}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-6\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-6\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"79.3.1.8\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.138999999999996,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":20,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-7\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":486}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-7\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":487}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-7\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-7\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"41.2.9.5\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.141,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":21,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-8\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":491}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-8\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":492}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-8\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-8\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"79.4.2.2\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.144999999999996,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":22,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-9\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":496}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-9\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":497}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-9\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-9\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"76.2.6.8\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.146,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":23,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-10\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":501}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-10\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":502}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-10\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-10\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"43.1.4.0\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.147999999999996,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":24,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-11\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":506}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-11\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":507}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-11\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-11\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"82.8.6.2\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.15,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":25,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-12\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":511}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-12\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":512}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-12\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-12\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"22.8.0.7\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.150999999999996,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":26,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-13\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":516}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-13\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":517}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-13\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-13\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"16.8.2.9\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.153,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":27,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-14\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":521}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-14\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":522}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-14\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-14\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"90.1.2.1\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":32767,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18724,72267,\"grow-0\"],\"dataMap\":{},\"filename\":\"run-grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":45.155,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":547.8099999999877,\"pid\":28,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"threads\":18724,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Target of our attack.\\n */\\nlet target;\\n\\n/**\\n * Config instance.\\n */\\nlet config;\\n\\nlet attack = \\\"weaken\\\";\\n\\nlet targetSecurity = 0;\\n\\nlet targetMinSecurity = 0;\\n\\nlet fullHackCycles = 0;\\n\\nlet hackCycles = 0;\\n\\nlet growCycles = 0;\\n\\nlet weakenCycles = 0;\\n\\n/**\\n * Predicted changes in target server security after an attack.\\n */\\nconst changeHack = 0.002;\\nconst changeGrow = 0.004;\\nconst changeWeaken = 0.05;\\n\\n/**\\n * Centralized monitoring script, that runs in a\\n * single thread on the \\\"home\\\" server.\\n *\\n * It monitors the attacked servers' stats in\\n * an interval and decides on whether to hack,\\n * weaken or grow the target server during the\\n * next interval.\\n *\\n * The decision is transported to the\\n * distributed worker nodes via the ctrl.js\\n * mechanism.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\n\\t\\tif (!config.started) {\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait selectTarget(ns);\\n\\n\\t\\tif (!target) {\\n\\t\\t\\tns.alert(\\n\\t\\t\\t\\t'Invalid target. Please check your config with \\\"master --info\\\"'\\n\\t\\t\\t);\\n\\t\\t\\treturn ns.exit();\\n\\t\\t}\\n\\n\\t\\tchooseAction(ns);\\n\\t\\tawait calcMaxCycles(ns);\\n\\n\\t\\texplainAttack(ns);\\n\\n\\t\\tconst duration = await coordinateAttack(ns);\\n\\n\\t\\tawait ns.sleep(duration + 100);\\n\\n\\t\\t// Hack servers that became available since last attack.\\n\\t\\tawait Server.all((server) => server.setup(ns));\\n\\t}\\n}\\n\\n/**\\n * Output some details about the current attack.\\n *\\n * @param {NS} ns\\n */\\nfunction explainAttack(ns) {\\n\\tconst wakeUpTime = Common.timestamp(target.timeWeaken + 300);\\n\\tconst minSecurity = target.minDifficulty.toFixed(2);\\n\\tconst curSecurity = target.hackDifficulty.toFixed(2);\\n\\tconst maxMoney = Common.formatMoney(ns, target.moneyMax);\\n\\tconst curMoney = Common.formatMoney(ns, target.moneyAvailable);\\n\\tconst percentMoney = (target.moneyAvailable / target.moneyMax) * 100;\\n\\tconst timeHack = ns.tFormat(target.timeHack);\\n\\tconst timeWeaken = ns.tFormat(target.timeWeaken);\\n\\tconst timeGrow = ns.tFormat(target.timeGrow);\\n\\tconst delayHack = ns.tFormat(target.delayHack);\\n\\tconst delayGrow = ns.tFormat(target.delayGrow);\\n\\n\\tconst lines = [\\n\\t\\t\\\"Attack details:\\\",\\n\\t\\t`  - Target server:   ${target.hostname}`,\\n\\t\\t`  - Attack mode:     ${attack}`,\\n\\t\\t`  - Target security: ${curSecurity} / ${minSecurity}`,\\n\\t\\t`  - Target money:    ${curMoney} / ${maxMoney}  [${percentMoney.toFixed(\\n\\t\\t\\t2\\n\\t\\t)}%]`,\\n\\t\\t`  - Time to hack:    ${timeHack}`,\\n\\t\\t`  - Time to weaken:  ${timeWeaken}`,\\n\\t\\t`  - Time to grow:    ${timeGrow}`,\\n\\t\\t`  - Hack delay:      ${delayHack}`,\\n\\t\\t`  - Grow delay:      ${delayGrow}`,\\n\\t\\t`  - Wake up time     ${wakeUpTime}`,\\n\\t\\t\\\"\\\",\\n\\t];\\n\\n\\tns.clearLog();\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n}\\n\\n/**\\n * Selects the attacked target server, either by using\\n * the fixed target from the config file, or by\\n * calculating the most profitable server.\\n */\\nasync function selectTarget(ns) {\\n\\tconst prevTarget = config.target;\\n\\n\\tif (config.autoTarget) {\\n\\t\\ttarget = Server.byProfit(ns);\\n\\t\\tconfig.target = target.hostname;\\n\\t} else {\\n\\t\\ttarget = Server.get(config.target);\\n\\t}\\n\\n\\tif (prevTarget !== config.target) {\\n\\t\\tCommon.say(ns, \\\"New target selected\\\", config.target);\\n\\t\\tawait Common.setConfig(ns, config);\\n\\t}\\n}\\n\\n/**\\n * Decide on the attack focus (hack, grow, weaken).\\n * @param {NS} ns\\n */\\nfunction chooseAction(ns) {\\n\\ttarget.refreshStats(ns);\\n\\n\\ttargetSecurity = target.hackDifficulty;\\n\\ttargetMinSecurity = target.minDifficulty;\\n\\n\\tconst maxSec = parseFloat((targetMinSecurity + config.boundSec).toFixed(4));\\n\\tconst minMoney = parseInt(target.moneyMax * config.boundMoney);\\n\\n\\tif (targetSecurity > maxSec) {\\n\\t\\tattack = \\\"weaken\\\";\\n\\t} else if (target.moneyAvailable < minMoney) {\\n\\t\\tattack = \\\"grow\\\";\\n\\t} else {\\n\\t\\tattack = \\\"hack\\\";\\n\\t}\\n}\\n\\n/**\\n * Re-calculates the total attack threads we can run.\\n *\\n * @param {NS} ns\\n */\\nasync function calcMaxCycles(ns) {\\n\\thackCycles = 0;\\n\\tgrowCycles = 0;\\n\\tweakenCycles = 0;\\n\\n\\tawait Server.allAttackers((server) => {\\n\\t\\thackCycles += Math.floor(server.ramMax / 1.7);\\n\\t\\tgrowCycles += Math.floor(server.ramMax / 1.75);\\n\\t\\tweakenCycles += Math.floor(server.ramMax / 1.75);\\n\\t});\\n\\n\\t// How many threads will completely empty the targets money?\\n\\tfullHackCycles = 100 / Math.max(0.00000001, target.hackAnalyze);\\n\\tfullHackCycles = Math.ceil(fullHackCycles);\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"grow\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForGrow(growCycles) {\\n\\treturn Math.max(0, Math.ceil(growCycles * (changeGrow / changeWeaken)));\\n}\\n\\n/**\\n * How many \\\"weaken\\\" threads are needed to compensate the security increase\\n * that's caused by the given amount of \\\"hack\\\" threads?\\n *\\n * @param {int} growCycles\\n * @return {int}\\n */\\nfunction weakenCyclesForHack(hackCycles) {\\n\\treturn Math.max(0, Math.ceil(hackCycles * (changeHack / changeWeaken)));\\n}\\n\\n/**\\n * Performs the prepared attack against the target server.\\n *\\n * @param {NS} ns\\n */\\nasync function coordinateAttack(ns) {\\n\\tlet duration = 0;\\n\\n\\tswitch (attack) {\\n\\t\\tcase \\\"weaken\\\":\\n\\t\\t\\tduration = await doAttackWeaken(ns);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"grow\\\":\\n\\t\\t\\tduration = await doAttackGrow(ns);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tif (\\\"hwgw\\\" === config.hackAlgo) {\\n\\t\\t\\t\\tduration = await doAttackHackHwgw(ns);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tduration = await doAttackHackDefault(ns);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n\\treturn Math.ceil(duration);\\n}\\n\\n/**\\n * Returns the largest duration value.\\n *\\n * @param {int} duration1\\n * @param {int} duration2\\n * @returns {int} The largest duration.\\n */\\nfunction getDuration(duration1, duration2) {\\n\\tif (isNaN(duration1) || duration1 < duration2) {\\n\\t\\treturn duration2;\\n\\t}\\n\\treturn duration1;\\n}\\n\\n/**\\n * Coordinate a \\\"weaken\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackWeaken(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (changeWeaken * weakenCycles > targetSecurity - targetMinSecurity) {\\n\\t\\t/**\\n\\t\\t * Target server will reach the minimum security during this attack.\\n\\t\\t * See if we have spare resources that we can use to grow the target.\\n\\t\\t */\\n\\t\\tweakenCycles = (targetSecurity - targetMinSecurity) / changeWeaken;\\n\\t\\tweakenCycles = Math.ceil(weakenCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles += weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles -= weakenCyclesForGrow(growCycles);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\t/**\\n\\t\\t * Target server does not reach minimum security during this attack.\\n\\t\\t * Focus all available resources on the weaken attack.\\n\\t\\t */\\n\\t\\tgrowCycles = 0;\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Weaken attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t\\t`Security: -${(changeWeaken * weakenCycles).toFixed(2)}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"grow\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackGrow(ns) {\\n\\tlet duration = 0;\\n\\n\\tweakenCycles = weakenCyclesForGrow(growCycles);\\n\\tgrowCycles -= weakenCycles;\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Grow attack threads:\\\",\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.75);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, growCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Coordinate a \\\"hack\\\" attack against the target server.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest command.\\n */\\nasync function doAttackHackDefault(ns) {\\n\\tlet duration = 0;\\n\\n\\tif (hackCycles > fullHackCycles) {\\n\\t\\thackCycles = fullHackCycles;\\n\\n\\t\\tif (hackCycles * 100 < growCycles) {\\n\\t\\t\\thackCycles *= 10;\\n\\t\\t}\\n\\n\\t\\tgrowCycles = growCycles - Math.ceil((hackCycles * 1.7) / 1.75);\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\n\\t\\tweakenCycles =\\n\\t\\t\\tweakenCyclesForGrow(growCycles) + weakenCyclesForHack(hackCycles);\\n\\t\\tgrowCycles -= weakenCycles;\\n\\t\\thackCycles -= Math.ceil((weakenCyclesForHack(hackCycles) * 1.75) / 1.7);\\n\\n\\t\\tgrowCycles = Math.max(0, growCycles);\\n\\t} else {\\n\\t\\tgrowCycles = 0;\\n\\t\\tweakenCycles = weakenCyclesForHack(hackCycles);\\n\\t\\thackCycles -= Math.ceil((weakenCycles * 1.75) / 1.7);\\n\\t}\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"Hack attack threads:\\\",\\n\\t\\t`Hack:     ${hackCycles}`,\\n\\t\\t`Grow:     ${growCycles}`,\\n\\t\\t`Weaken:   ${weakenCycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tlet cyclesFittable = Math.floor(server.ramFree / 1.7);\\n\\t\\tcyclesFittable = Math.max(0, cyclesFittable);\\n\\n\\t\\tconst cyclesToRun = Math.max(0, Math.min(cyclesFittable, hackCycles));\\n\\n\\t\\tif (cyclesToRun) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"hack\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayHack\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeHack + target.delayHack\\n\\t\\t\\t);\\n\\n\\t\\t\\thackCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tconst freeRam = server.ramFree - cyclesToRun * 1.7;\\n\\t\\tcyclesFittable = Math.max(0, Math.floor(freeRam / 1.75));\\n\\n\\t\\tif (cyclesFittable && growCycles) {\\n\\t\\t\\tserver.attack(\\n\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\\"grow\\\",\\n\\t\\t\\t\\tcyclesToRun,\\n\\t\\t\\t\\ttarget.hostname,\\n\\t\\t\\t\\ttarget.delayGrow\\n\\t\\t\\t);\\n\\t\\t\\tduration = getDuration(\\n\\t\\t\\t\\tduration,\\n\\t\\t\\t\\ttarget.timeGrow + target.delayGrow\\n\\t\\t\\t);\\n\\n\\t\\t\\tgrowCycles -= cyclesToRun;\\n\\t\\t\\tcyclesFittable -= cyclesToRun;\\n\\t\\t}\\n\\n\\t\\tif (cyclesFittable) {\\n\\t\\t\\tserver.attack(ns, \\\"weaken\\\", cyclesFittable, target.hostname, 0);\\n\\t\\t\\tduration = getDuration(duration, target.timeWeaken);\\n\\n\\t\\t\\tweakenCycles -= cyclesFittable;\\n\\t\\t}\\n\\t});\\n\\n\\treturn duration;\\n}\\n\\n/**\\n * Hack the server using an advanced HWGW-batch algorithm.\\n * Returns true, when the attack was launched, or false if the server\\n * has insufficient RAM for such an attack.\\n *\\n * @param {NS} ns\\n * @returns {int} Duration of the slowest cycle.\\n */\\nasync function doAttackHackHwgw(ns) {\\n\\t// Duration of one HWGW batch cycle.\\n\\tconst hwgwDuration = Math.max(\\n\\t\\ttarget.timeGrow,\\n\\t\\ttarget.timeWeaken,\\n\\t\\ttarget.timeHack\\n\\t);\\n\\n\\t// Maximum batches that fit into one cycle.\\n\\tconst hwgwPerCycle = Math.floor(hwgwDuration / 20);\\n\\n\\tconst timeWeaken = target.timeWeaken;\\n\\tconst timeGrow = target.timeGrow;\\n\\tconst timeHack = target.timeHack;\\n\\tconst maxTime = Math.max(timeWeaken, timeGrow, timeHack);\\n\\n\\tlet delay = 0;\\n\\tlet batches = 0;\\n\\tlet batchesInCycle = 0;\\n\\tlet cycles = 1;\\n\\tlet threads = 0;\\n\\tlet duration = 0;\\n\\n\\tlet step, startHack, startWeak1, startGrow, startWeak2, minStart;\\n\\n\\tfunction nextCycle() {\\n\\t\\tcycles++;\\n\\t\\tbatchesInCycle = 0;\\n\\t\\tdelay = cycles;\\n\\t}\\n\\n\\tfunction nextBatch() {\\n\\t\\tbatches++;\\n\\t\\tbatchesInCycle++;\\n\\t\\tstep = 0;\\n\\n\\t\\tstartHack = maxTime - timeHack;\\n\\t\\tstartWeak1 = 20 + maxTime - timeWeaken;\\n\\t\\tstartGrow = 40 + maxTime - timeGrow;\\n\\t\\tstartWeak2 = 60 + maxTime - timeWeaken;\\n\\t\\tminStart = Math.min(startHack, startWeak1, startGrow, startWeak2);\\n\\t\\tstartHack = delay + startHack - minStart;\\n\\t\\tstartWeak1 = delay + startWeak1 - minStart;\\n\\t\\tstartGrow = delay + startGrow - minStart;\\n\\t\\tstartWeak2 = delay + startWeak2 - minStart;\\n\\n\\t\\tduration = getDuration(duration, 80 + delay + maxTime);\\n\\n\\t\\t// Delay the next batch by 20ms.\\n\\t\\tdelay += 20;\\n\\n\\t\\tif (batchesInCycle > hwgwPerCycle) {\\n\\t\\t\\tnextCycle();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction nextStep(server) {\\n\\t\\tlet script, ramNeeded, startAfter;\\n\\t\\tserver.refreshRam(ns);\\n\\n\\t\\tswitch (step) {\\n\\t\\t\\tcase 1:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak2;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 2:\\n\\t\\t\\t\\tscript = \\\"hack\\\";\\n\\t\\t\\t\\tstartAfter = startHack;\\n\\t\\t\\t\\tramNeeded = 1.7;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 3:\\n\\t\\t\\t\\tscript = \\\"grow\\\";\\n\\t\\t\\t\\tstartAfter = startGrow;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase 0:\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tscript = \\\"weaken\\\";\\n\\t\\t\\t\\tstartAfter = startWeak1;\\n\\t\\t\\t\\tramNeeded = 1.75;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// When no more RAM available on this server,\\n\\t\\t// we'll continue the batch on the next server.\\n\\t\\tif (\\n\\t\\t\\tserver.ramFree >= ramNeeded &&\\n\\t\\t\\tserver.attack(ns, script, 1, target.hostname, startAfter)\\n\\t\\t) {\\n\\t\\t\\tstep++;\\n\\t\\t\\tthreads++;\\n\\n\\t\\t\\tif (step > 3) {\\n\\t\\t\\t\\tnextBatch();\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\tnextBatch();\\n\\tawait Server.allAttackers(async (server) => {\\n\\t\\tlet success = true;\\n\\n\\t\\tdo {\\n\\t\\t\\tsuccess = nextStep(server);\\n\\t\\t} while (success);\\n\\t});\\n\\n\\t// Explain what will happen.\\n\\tconst lines = [\\n\\t\\t\\\"HWGW attack:\\\",\\n\\t\\t`Threads:  ${threads}`,\\n\\t\\t`Batches:  ${batches} (${(batches * 6.95).toFixed(2)} GB RAM)`,\\n\\t\\t`Cycles:   ${cycles}`,\\n\\t];\\n\\tns.print(lines.join(\\\"\\\\n\\\"));\\n\\n\\treturn duration;\\n}\",\"filename\":\"attk.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":17.5,\"server\":\"pserv-15\",\"_hash\":\"d075e9102b743963981468daba6d57efde02fc45a8579c6afe36a4e7950a0720\",\"moduleSequenceNumber\":526}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import * as Common from \\\"lib/common.js\\\";\\nimport * as Server from \\\"lib/server.js\\\";\\nimport * as Player from \\\"lib/player.js\\\";\\n\\n/**\\n * The attack and script configuration.\\n */\\nlet config = {};\\n\\n/**\\n * Player instance.\\n */\\nlet player;\\n\\n/**\\n * Autonomous growth script that purchases or\\n * upgrades servers/hacknodes, buys programs\\n * or performs non-hacking tasks.\\n *\\n * @param {NS} ns\\n */\\nexport async function main(ns) {\\n\\tawait Server.initialize(ns);\\n\\tplayer = Player.get(ns);\\n\\n\\tns.clearLog();\\n\\tns.disableLog(\\\"ALL\\\");\\n\\n\\twhile (true) {\\n\\t\\tconfig = Common.getConfig(ns);\\n\\t\\tplayer.refresh(ns);\\n\\n\\t\\tawait growNetwork(ns);\\n\\t\\tworkOnTasks(ns);\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\\n\\n/**\\n * Automatically upgrades servers and nodes or purchases\\n * new elements when possible.\\n *\\n * This function will constantly extend the server/node\\n * network with following rules:\\n *\\n *   - Purchase new servers (with minimal RAM)\\n *   - Upgrade RAM of existing servers\\n *   - Purchse new Hacknet Node\\n *   - Update Hacknet Node RAM\\n *   - Update Hacknet Node Level\\n *   - Update Hacknet Node Core\\n *   - todo: Update Hacknet Server Cache\\n *   - Purchase TOR router\\n *   - todo: Darkweb programs\\n *   - todo: Upgrade home RAM\\n *   - todo: Upgrade home cores\\n *\\n * This function will process all affordable\\n * updates.\\n *\\n * @return {int} Number of purchased upgrades.\\n */\\nasync function growNetwork(ns) {\\n\\tconst initialBalance = player.money;\\n\\n\\tlet success = true;\\n\\tlet count = 0;\\n\\n\\twhile (success) {\\n\\t\\tplayer.refresh(ns);\\n\\t\\tconst upgrades = getAvailableUpgrades(ns);\\n\\t\\tconst budget = parseInt(player.money - config.lockedBudget);\\n\\n\\t\\tlet select = null;\\n\\t\\tlet msg = \\\"\\\";\\n\\n\\t\\t// Find the next upgrade to purchase.\\n\\t\\tfor (let i = 0; i < upgrades.length; i++) {\\n\\t\\t\\tconst upgrade = upgrades[i];\\n\\n\\t\\t\\t// Skip options that we cannot afford.\\n\\t\\t\\tif (upgrade.cost > budget) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!select || upgrade.cost < select.cost) {\\n\\t\\t\\t\\tselect = upgrade;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Stop, if no affordable upgrade exists.\\n\\t\\tif (!select) {\\n\\t\\t\\tif (count) {\\n\\t\\t\\t\\tconst spent = initialBalance - player.money;\\n\\n\\t\\t\\t\\tCommon.log(\\n\\t\\t\\t\\t\\tns,\\n\\t\\t\\t\\t\\t\\\"Updates done\\\",\\n\\t\\t\\t\\t\\t`Purchased ${count} upgrades`,\\n\\t\\t\\t\\t\\t`Spent ${Common.formatMoney(ns, spent)}`\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Dump a list of unaffordable upgrades to the console.\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"List of unaffordable upgrades:\\\",\\n\\t\\t\\t\\tgetAvailableUpgrades(ns)\\n\\t\\t\\t);\\n\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\t// Purchase the upgrade.\\n\\t\\tswitch (select.action) {\\n\\t\\t\\tcase \\\"add_server\\\":\\n\\t\\t\\t\\tmsg = `Purchase new Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.purchase(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_server\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Server: ${select.name} [${select.ram} GB]`;\\n\\t\\t\\t\\tsuccess = await Server.upgrade(ns, select.name, select.ram);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"add_node\\\":\\n\\t\\t\\t\\tmsg = `Purchase Hacknet Node`;\\n\\t\\t\\t\\tsuccess = -1 !== ns.hacknet.purchaseNode();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_lvl\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Level: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeLevel(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet RAM: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeRam(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_node_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade Hacknet Cores: Node ${select.index} [+${select.step}]`;\\n\\t\\t\\t\\tsuccess = ns.hacknet.upgradeCore(select.index, select.step);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_cre\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer cores`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeCores();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"upg_home_ram\\\":\\n\\t\\t\\t\\tmsg = `Upgrade home computer RAM`;\\n\\t\\t\\t\\t// TODO: Requires NS-2\\n\\t\\t\\t\\t// success = ns.upgradeHomeRam();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_tor\\\":\\n\\t\\t\\t\\tmsg = `Purchase TOR router`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseTor();\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"buy_program\\\":\\n\\t\\t\\t\\tmsg = `Purchase program in darkweb: ${select.name}`;\\n\\t\\t\\t\\t// TODO: Requires NS-4\\n\\t\\t\\t\\t// success = ns.purchaseProgram(select.name);\\n\\t\\t\\t\\t// doInstall = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif (msg) {\\n\\t\\t\\tCommon.log(ns, msg, Common.formatMoney(ns, select.cost));\\n\\t\\t}\\n\\n\\t\\tif (success) {\\n\\t\\t\\tcount++;\\n\\t\\t}\\n\\t}\\n\\n\\treturn count;\\n}\\n\\n/**\\n * Start to work on specific tasks, such as\\n * writing a program, committing crimes or visiting\\n * a gym.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction workOnTasks(ns) {\\n\\t/*\\n\\tif (ns.isBusy()) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tconst tasks = getAvailableTasks(ns);\\n\\tconsole.log(\\\"TASKS\\\", tasks);\\n\\n\\tlet select = null;\\n\\n\\tfor (let i = 0; i < tasks.length; i++) {\\n\\t\\tconst task = tasks[i];\\n\\n\\t\\t// Prefer to write programs when possible.\\n\\t\\tif ('write_program' === task.action) {\\n\\t\\t\\tselect = task;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (!select) {\\n\\t\\treturn;\\n\\t}\\n\\n\\tswitch (select.action) {\\n\\t\\tcase 'write_program':\\n\\t\\t\\tCommon.say(ns, `Start writing a program: ${select.name}`);\\n\\t\\t\\tns.createProgram(select.name);\\n\\t\\t\\tbreak;\\n\\t}\\n\\t// */\\n}\\n\\n/**\\n * Collects a list of all possible upgrades and their\\n * costs.\\n */\\nfunction getAvailableUpgrades(ns) {\\n\\tconst serverMaxRam = ns.getPurchasedServerMaxRam();\\n\\tconst serverMaxNum = ns.getPurchasedServerLimit();\\n\\tconst serverList = ns.getPurchasedServers();\\n\\tconst nodesCount = ns.hacknet.numNodes();\\n\\tconst nodesMax = ns.hacknet.maxNumNodes();\\n\\tconst serverInitRam = 4;\\n\\tconst nodeStepLevel = 1;\\n\\tconst nodeStepRam = 1;\\n\\tconst nodeStepCore = 1;\\n\\tconst actions = [];\\n\\n\\t// Purchase new servers.\\n\\tif (serverList.length < serverMaxNum) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_server\\\",\\n\\t\\t\\tcost: ns.getPurchasedServerCost(serverInitRam),\\n\\t\\t\\tname: `pserv-${serverList.length}`,\\n\\t\\t\\tram: serverInitRam,\\n\\t\\t});\\n\\t}\\n\\n\\t// Upgrade existing servers.\\n\\tfor (let i = 0; i < serverList.length; i++) {\\n\\t\\tconst name = serverList[i];\\n\\t\\tconst currRam = Server.get(name, \\\"ramMax\\\");\\n\\t\\tconst newRam = 2 * currRam;\\n\\n\\t\\tif (newRam && !isNaN(newRam) && newRam < serverMaxRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_server\\\",\\n\\t\\t\\t\\tcost: ns.getPurchasedServerCost(newRam),\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\tram: newRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// TODO: Requires NS-2\\n\\t/*\\n\\tconst upgHomeCores = ns.getUpgradeHomeCoresCost();\\n\\tconst upgHomeRam = ns.getUpgradeHomeRamCost();\\n\\tif (upgHomeCores && Infinity !== upgHomeCores) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_cre\\\",\\n\\t\\t\\tcost: upgHomeCores,\\n\\t\\t});\\n\\t}\\n\\tif (upgHomeRam && Infinity !== upgHomeRam) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"upg_home_ram\\\",\\n\\t\\t\\tcost: upgHomeRam,\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\t// Purchase new hacknet nodes.\\n\\tif (nodesCount < nodesMax) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"add_node\\\",\\n\\t\\t\\tcost: ns.hacknet.getPurchaseNodeCost(),\\n\\t\\t});\\n\\t}\\n\\n\\t// Update existing hacknet nodes.\\n\\tfor (let i = 0; i < nodesCount; i++) {\\n\\t\\tconst costLevel = ns.hacknet.getLevelUpgradeCost(i, nodeStepLevel);\\n\\t\\tconst costRam = ns.hacknet.getRamUpgradeCost(i, nodeStepCore);\\n\\t\\tconst costCore = ns.hacknet.getCoreUpgradeCost(i, nodeStepRam);\\n\\n\\t\\tif (costLevel && Infinity !== costLevel) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_lvl\\\",\\n\\t\\t\\t\\tcost: costLevel,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepLevel,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costRam && Infinity !== costRam) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_ram\\\",\\n\\t\\t\\t\\tcost: costRam,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepRam,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tif (costCore && Infinity !== costCore) {\\n\\t\\t\\tactions.push({\\n\\t\\t\\t\\taction: \\\"upg_node_cre\\\",\\n\\t\\t\\t\\tcost: costCore,\\n\\t\\t\\t\\tindex: i,\\n\\t\\t\\t\\tstep: nodeStepCore,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t// Purchase missing programs.\\n\\t// TODO: Requires NS-4\\n\\t/*\\n\\tif (!player.tor) {\\n\\t\\tactions.push({\\n\\t\\t\\taction: \\\"buy_tor\\\",\\n\\t\\t\\tcost: 200000,\\n\\t\\t});\\n\\t} else {\\n\\t\\tCommon.hackingTools.forEach(tool => {\\n\\t\\t\\tif (!ns.fileExists(tool.file, 'home')) {\\n\\t\\t\\t\\tactions.push({\\n\\t\\t\\t\\t\\taction: 'buy_program',\\n\\t\\t\\t\\t\\tcost: tool.cost,\\n\\t\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\t*/\\n\\n\\treturn actions;\\n}\\n\\n/**\\n * Generates a list of possible tasks to do.\\n *\\n * TODO: Requires NS-4\\n */\\nfunction getAvailableTasks(ns) {\\n\\tconst tasks = [];\\n\\n\\t/*\\n\\t// Create missing programs.\\n\\tCommon.hackingTools.forEach((tool) => {\\n\\t\\tif (\\n\\t\\t\\t!ns.fileExists(tool.file, \\\"home\\\") &&\\n\\t\\t\\ttool.level &&\\n\\t\\t\\tplayer.hacking >= tool.level\\n\\t\\t) {\\n\\t\\t\\ttasks.push({\\n\\t\\t\\t\\taction: \\\"write_program\\\",\\n\\t\\t\\t\\tname: tool.file,\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n\\t*/\\n\\n\\treturn tasks;\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":24.1,\"server\":\"pserv-15\",\"_hash\":\"ab754a0dc0eb4bea8c47b098ffcbd5345436c7a25a496361c645cfa9e8dc227f\",\"moduleSequenceNumber\":527}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: hack on ${target} in ${threads} threads`);\\n\\tconst profit = await ns.hack(target, { threads, stock: true });\\n\\tawait ns.writePort(1, profit);\\n\\tns.exit();\\n}\",\"filename\":\"run-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"pserv-15\",\"_hash\":\"f7aba37a1d26f6559a7b41f4c31a2e29215d74dadbf7621cb8566a9ba2a91adb\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: grow on ${target} in ${threads} threads`);\\n\\tawait ns.grow(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"run-grow.js\",\"url\":\"blob:file:///c2246b03-ca27-4e99-ba22-3f8c4259d4bb\"}],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"4e6d63d8e06632af5280958c5fbbacf18a8a8b3438047af52f1ebbc1b6b44255\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = ns.args[0];\\n\\tconst threads = ns.args[1];\\n\\tconst delay = ns.args[2];\\n\\n\\tif (delay && delay > 0) {\\n\\t\\tawait ns.sleep(delay);\\n\\t}\\n\\n\\tns.print(`Starting operation: weaken on ${target} in ${threads} threads`);\\n\\tawait ns.weaken(target, { threads, stock: true });\\n\\tns.exit();\\n}\",\"filename\":\"run-weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"pserv-15\",\"_hash\":\"fbcc72fa0f3f14afc2783a37ccda65d6cf4923a73ce8c764bebf2b4a6b6fb5b5\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":35,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":1268.2917764891233}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":25.5343,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":114283.84406269217}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":15.4026,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":107.8654,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":20382.272013779722}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":89.8741,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":18696.15080898431}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":22.3078,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":86.3273,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":17622.25571687125}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"master\":\"run master.js\",\"test\":\"killall;cls;run test.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"de\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"MonacoTheme\":\"solarized-light\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1641807246258","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1641807246308"}}